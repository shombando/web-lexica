{"version":3,"sources":["game/score.ts","util/logger.ts","game/index.ts","game/words.ts","util/hooks.ts","util/storage.ts","game/language.ts","util/compatibility-android.ts","util/url.ts","game/url.ts","game/rules/types.ts","util/base-64.ts","game/board/hooks.ts","translations/implemented-languages.ts","game/rules/util.ts","game/rules/hooks.ts","translations/languages/en/language-titles.ts","translations/languages/ar/language-titles.ts","translations/languages/bg/language-titles.ts","translations/languages/bn/language-titles.ts","translations/languages/ca/language-titles.ts","translations/languages/cs/language-titles.ts","translations/languages/da/language-titles.ts","translations/languages/de/language-titles.ts","translations/languages/el/language-titles.ts","translations/languages/eo/language-titles.ts","translations/languages/es/language-titles.ts","translations/languages/et/language-titles.ts","translations/languages/fa/language-titles.ts","translations/languages/fi/language-titles.ts","translations/languages/fr/language-titles.ts","translations/languages/he/language-titles.ts","translations/languages/hi/language-titles.ts","translations/languages/hr/language-titles.ts","translations/languages/hu/language-titles.ts","translations/languages/it/language-titles.ts","translations/languages/ja/language-titles.ts","translations/languages/kmr/language-titles.ts","translations/languages/lt/language-titles.ts","translations/languages/mr/language-titles.ts","translations/languages/nb-rNO/language-titles.ts","translations/languages/nl/language-titles.ts","translations/languages/pl/language-titles.ts","translations/languages/pt/language-titles.ts","translations/languages/pt-rBR/language-titles.ts","translations/languages/pt-rPT/language-titles.ts","translations/languages/ru/language-titles.ts","translations/languages/sat/language-titles.ts","translations/languages/sk/language-titles.ts","translations/languages/sv/language-titles.ts","translations/languages/th/language-titles.ts","translations/languages/tr/language-titles.ts","translations/languages/uk/language-titles.ts","translations/languages/vi/language-titles.ts","translations/languages/zh-rCN/language-titles.ts","translations/languages/zh-rTW/language-titles.ts","translations/index.ts","game/high-scores.ts","util/css-parse.ts","style/constants.ts","components/Svg.tsx","components/GameModeDetails.tsx","util/classes.ts","components/Banner.tsx","pages/GameModes.tsx","game/timer.ts","pages/Home.tsx","components/game/ScoredWordList.tsx","components/ResultsScreen.tsx","components/game/Score.tsx","game/board/util.ts","game/guess.ts","components/game/Board/hooks.ts","util/touch.ts","components/game/Board/Board.tsx","components/game/Guesses.tsx","components/game/Board/index.ts","game/dictionary/util.ts","game/dictionary/hooks.ts","components/game/ShareGameQrCode.tsx","game/dictionary/dictionary.worker.ts","util/web-worker.ts","components/game/MostRecentGuess.tsx","components/game/layouts.tsx","components/InGameScreen.tsx","components/QrCode.tsx","components/StartScreen.tsx","pages/GameScreen.tsx","game/time-attack.ts","pages/Multiplayer.tsx","pages/Options.tsx","pages/SinglePlayer.tsx","pages/Lexicons.tsx","components/new-game-mode/Name.tsx","components/new-game-mode/Description.tsx","components/new-game-mode/TimeLimit.tsx","components/new-game-mode/util.ts","components/Radio.tsx","components/new-game-mode/ScoringType.tsx","components/new-game-mode/BoardSize.tsx","components/new-game-mode/MinimumWordLength.tsx","components/new-game-mode/TimeAttack.tsx","pages/NewGameMode.tsx","App.tsx","index.tsx"],"names":["ScoreAction","ScoreType","InternalScoreAction","logger","error","console","info","debug","GameType","scoreReducer","state","action","type","AddGuess","guess","foundWords","remainingWords","includes","R","word","handleAddGuess","UpdateDictionary","Error","Score","createContext","sort","byLength","alphabetically","splitWordIntoLetters","letters","sortWith","orderedLetters","w","response","length","startingLength","letter","indexOf","substring","push","JSON","stringify","getLetterScore","letterScores","lengthScores","scoreWord","scoreType","Letters","Object","keys","acc","scoreWordByLetterScores","Length","scoreWordByLength","orderByWordScore","dictionary","LetterScores","ElementIdentifier","CurrentGameType","Invite","ScreenOrientation","useElementSize","identifierType","identifier","useMemo","elementName","elementNameType","useState","element","setElement","location","top","right","bottom","left","size","width","height","setSize","resizeCallback","useCallback","el","getBoundingClientRect","useEffect","Class","document","getElementsByClassName","Id","getElementById","Type","getElementsByTagName","getElementBasedOnIdentifier","eventListener","window","addEventListener","removeEventListener","useOrientation","useReducer","newOrientation","Portrait","Landscape","orientation","setOrientation","SamePageEventType","freeze","LocalStorage","get","key","parser","parse","item","localStorage","getItem","getSamePageEvent","value","CustomEvent","bubbles","cancelable","detail","useStorage","initialValue","setItem","eventHandler","e","GameStorage","initialValueIfNull","serializer","serialize","this","undefined","serialized","result","dispatchEvent","storage","defaultValue","isString","BreakingChanges","getLanguageMetadata","languageCode","axios","then","data","getDictionary","useLanguage","loading","metadata","name","locale","isBeta","definitionUrl","letterProbabilities","setState","Promise","all","catch","err","useLanguageCodeFromLocalStorage","code","LanguageCode","Language","useMultipleLanguageMetadata","setLoading","setMetadata","metadatas","reduced","reduce","GameParamMap","DefaultRulesets","encodeBoard","board","utf8","stringified","join","btoa","unescape","encodeURIComponent","replace","getSearchString","boardArray","language","duration","time","score","minimumWordLength","timeAttack","toSeconds","keyValuePairs","Board","Time","MinimumWordLength","MinimumVersion","Version","TimeAttack","map","kv","useGameUrlParameters","useLocation","urlParams","minimumVersion","parseInt","ta","version","parseGameParameters","search","split","keyValuePair","decodeURI","generateBoard","letterCount","ogProbabilities","probabilities","unshuffledBoard","toShuffle","currentIndex","randomIndex","Math","floor","random","randomLetter","currentLetter","shuffle","mapping","l","max","getRandomInt","splice","getB64DelimitedURLBoard","b64","delimiter","decodeURIComponent","escape","atob","getLanguageLetters","getUndelimitedURLBoard","a","useBoardFromUrl","params","setBoard","boardPromise","resolve","getURLBoard","BoardRefresh","ImplementedLanguage","defaultRulesets","Sprint","minutes","boardWidth","Marathon","LetterPoints","rulesetStorage","Rulesets","currentRulesetIdStorage","CurrentRulesetId","getRuleset","id","setCurrentRuleset","set","useRulesFromStorage","ruleset","setRuleset","useRulesets","Rules","languageTitles","defaultTranslation","en","languageCodeToTranslationsMap","English","Arabic","ar","Bulgarian","bg","Bengali","bn","Catalan","ca","Czech","cs","Danish","da","German","de","ModernGreek1453","Esperanto","eo","Spanish","es","Estonian","et","Persian","fa","Finnish","fi","French","fr","Hebrew","he","Hindi","hi","Croatian","hr","Hungarian","hu","Italian","it","Japanese","ja","NorthernKurdish","kmr","Lithuanian","lt","Marathi","mr","NorwegianBokml_Norway","nb_rNO","Dutch","nl","Polish","pl","Portuguese","pt","Portuguese_Brazil","pt_rBR","Portuguese_Portugal","pt_rPT","Russian","ru","Santali","sat","Slovak","sk","Swedish","sv","Thai","th","Turkish","tr","Ukrainian","uk","Vietnamese","vi","Chinese_China","zh_rCN","Chinese_TaiwanProvinceofChina","zh_rTW","addTranslationDefaults","preferred","defaults","preferredKey","isImplemented","lang","validLang","getBestTranslation","preset","region","bestFit","getClosestLanguageIfPossible","navigator","useTranslations","baseLanguage","setBaseLanguage","translation","parentLang","match","groups","preferredTranslations","withParentLangDefaults","translationsWithDefaults","handleStorageUpdate","event","Translations","getHeight","rawHeight","getComputedStyle","parseFloat","unitMap","em","vh","vw","px","num","cssFunctionMap","clamp","min","target","clampMin","b","getCssFunctionName","expression","firstParenIndex","fnName","trim","isValidFunctionName","stitchParensReducer","index","arr","forEach","char","getParenCounts","isCssFunction","arg","getUnit","exec","unit","hasOwnProperty","isValidUint","factor","ops","shift","number","parsedNumber","term","op","remainingOps","operation","factorResult","isExpression","evaluateStatement","evaluateFunction","termResult","filter","args","values","message","argToString","isUnit","RegExp","test","toString","makeExpression","strings","i","argString","cssExp","useCssExp","setResult","getConstants","fontSize","fontSizeTitle","fontSizeSubscript","fontWeightBold","fontWeightLight","colorContentDark","colorContentLight","colorContentLowContrastDark","colorContentLowContrastLight","colorBackgroundDark","colorBackgroundLight","colorBackgroundDarkAlt","colorBackgroundLightAlt","colorAccent","colorGreen","colorRed","colorYellow","useConstants","constants","updateConstants","updateState","ready","setReady","useUnits","Customizable","svg","props","render","fill","withOverrides","Svg","Standard","title","getReadableTime","normalize","GameModeDetails","scoringType","color","rulesetOverride","defaultRules","useContext","rules","overrides","getOverrideObject","getOverrides","getSvg","style","className","Timer","GridView","EmojiEvents","Sort","DirectionsRun","getClass","cssClass","isTrueAndFalseCaseClass","condition","trueCase","true","falseCase","false","makeClasses","classes","useRenderInBanner","renderable","RenderInBanner","cleanUp","_","Banner","RenderProp","toRender","history","useHistory","pageName","path","segment","s","pop","getPageName","pathname","onClickHandler","goBack","leftBound","documentElement","clientWidth","clientHeight","callback","useScreenSize","maxHeight","maxWidth","onClick","ArrowBack","Mode","rulesetTuple","handleOnClick","isSelected","classNames","ModesList","rulesetsObject","rulesets","selectedRulesetId","entries","AddGameMode","to","Add","GameModes","TimerAction","getHighScores","HighScores","getHighScore","scores","useUpdateHighScore","currentId","toCompare","compareAgainst","findRulesetId","computedScore","scoredWords","setScoredWords","dispatchComputedScore","additionalScore","useMemoizedComputedScore","setHighScore","GameSettings","languageTitle","Title","PlayGameButtons","PlayCircle","GroupAdd","HighScore","highScore","highScores","useHighScore","Home","setGameType","Create","ScoredWords","orderedWords","mapWithIndex","toUpperCase","Lists","secondsBetweenDates","start","end","round","getTime","timerReducer","Pause","pauseTime","isPaused","remainingTime","startTime","handlePause","Resume","resumeTime","handleResume","AddTime","oldRemainingTime","sum","seconds","handleAddTime","getIntervalCallback","intervalRef","timeEndCallback","current","clearInterval","Date","addTime","getRemainingTime","timeInSeconds","getFormatted","padStart","hideTime","showPercent","remainingTimeRef","useRef","setRemainingTime","showTimeAddition","setShowTimeAddition","timeAddition","setTimeAddition","ScoreContext","interval","setInterval","timeChange","setTimeout","currentScore","totalScore","foundCount","totalCount","display","ListSelector","listName","displayedList","updateDisplayedList","FoundWords","svgProps","selectorClass","Results","orderedFoundWords","orderedMissedWords","foundWordsClass","MissedWords","missedWordsClass","listSelectorProps","getBoard","line","sqrt","splitLineAlongRows","getColumns","visited","column","getRows","row","visitNeighbors_","coordinates","onlyUnvisitedNeighbors","neighbors","getPossibleTravelDirections","VisitedNeighbor","envokeCallback","val","visitNeighbors","options","curried","GuessAction","deepCopyBoard","copy","unfilteredRows","rows","potentialRow","unfilteredColumns","columns","getAllPossibleCoordinates","potentialColumn","currentRow","currentColumn","ConfirmationType","handleEndGuess","currentGuess","guesses","newBoard","getUnvisitedBoard","isGuessing","handleEnterLetterWhileGuessing","newCoords","cw","isValidMove","boardCopy","toAppend","guessReducer","__UpdateBoard","handleUpdateBoard","EnterLetter","handleEnterLetter","BeginGuess","newState","is","handleBeginGuess","EndGuess","Guess","GuessDispatch","useConfirmationEffect","shouldShowVisualFeedback","dispatch","lastGuess","setLastGuess","feedbackClasses","setFeedbackClasses","triggerFeedback","lastFoundWord","Stale","Incorrect","Correct","getConfirmationType","getPointOnGridInfo","gridOrigin","squareDimensions","point","useBoundingBox","boundingBox","originX","x","originY","y","getUnadjustedIndex","dimension","offset","isNegative","getOffset","origin","xOffset","yOffset","xIndex","yIndex","getBoundedIndex","residingSquare","getCenterOfIndex","centerOfSquare","averageDimension","pointDistanceFromCenterOfSquare","v1","v2","abs","getMagnitued","Letter","guessDispatch","showScore","onMouseOver","onTouchStart","preventDefault","Row","children","getLast","items","GuessOrientation","handleClick","clicked","makeColumn","maybeDispatchMove","acceptableDistance","clientX","clientY","divisionAmount","onMouseDown","onMouseUp","lastTouch","touches","onTouchMove","onTouchEnd","isFirstGuess","isInDictionary","Guesses","GuessContext","guessesReversed","indexedMap","guessInfo","lastIndexOf","getGuessInfo","visitNeighborsCallback","lettersSoFar","square","coords","letterChain","letterChainIsWord","wordsToFilter","toReturn","partialLetterChainMatches","visitResults","getWordsOnBoard","minWordLength","wordsOfValidLength","boardReduce","newFoundWords","Platform","worker","Worker","resolveDictionary","fullDictionary","toSend","payload","respond","reject","requestId","uuid","postMessage","Dictionary","boardDictionary","MostRecentGuess","currentLetterChain","showLetterChain","mostRecentGuess","isCorrectGuess","repeatScore","HorizontalContainer","VerticalContainer","Game","useVerticalLayout","guessOrientation","Horizontal","Vertical","mostRecentGuesses","foundWordsComponent","layout","applySize","applyColor","foreground","background","QrCode","qr","Qr","addData","make","colors","applyProps","createSvgTag","dangerouslySetInnerHTML","__html","ShareGameQrCode","platform","baseUrl","Android","Web","getBaseUrl","landscapeSize","portraitSize","StartScreen","handleStart","showQrCode","pageTitle","handleBoardRefresh","translations","showRefreshButton","startButtonClass","disabled","wordCount","qrCode","LoadingScreen","shouldAutoStart","autoStart","isMultiplayer","finished","updateFinished","started","updateStarted","languageState","setDictionary","dict","useBoardDictionary","stateBoard","reducer","useGuesses","dispatchGuess","handleFinish","timer","totalTimeInSeconds","memoizedTimeEndCallback","actualRemainingTime","stateRemainingTime","shouldSetInterval","useTimer","guessState","boardDictionaryState","useScore","triggered","setTriggered","useAutoStart","foundWordCountRef","foundWordLength","count","timeAttackMultiplier","lastWordFound","timeToAdd","useTimeAttack","startScreenProps","InGameScreen","getNextScreenLogic","Provider","NewGame","shouldUpdateSearch","searchString","url","useUpdatingSearchString","Multiplayer","useRulesFromQueryString","GameScreen","isNewGame","refreshBoard","gameType","Options","SinglePlayer","Lexicon","beta","getLabel","text","getBetaLabel","currentCode","setLanguageInLocalStorage","Lexicons","languages","Name","handleNameUpdate","rawName","setRawName","handleChange","prefix","about","onChange","placeholder","required","minLength","getPrefixedClass","segments","getClasses","c","Description","ruleClass","toLowerCase","TimeLimit","handleTimeUpdate","rawTimeLimit","setRawTimeLimit","handleTimeLimitChange","Number","isNaN","Schedule","step","Radio","group","checked","inputRef","RadioButtonChecked","RadioButtonUnchecked","ref","optionClass","ScoringType","handleScoreUpdate","scoreTypes","setScoreType","BoardSize","handleBoardSizeChange","sizes","boardSize","setBoardSize","optionsClass","handleLengthUpdate","wordLengths","setMinimumWordLength","getMultiplierName","multiplier","handleTimeAttackUpdate","timeAttackMultipliers","selectedMultiplier","setMultiplier","handleMultiplierUpdate","m","boardSizes","NewGameMode","setTimeAttack","setName","timeLimit","setTimeLimit","isValid","validName","handleSave","addRuleset","BannerElement","showName","Save","SaveGameMode","App","useLanguageFromLocalStorage","languageMetadata","refreshTrigger","useGeneratedBoard","useGameType","renderState","context","useBannerContext","basename","exact","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3ecc1de0.chunk.js","sourcesContent":["import * as R from 'ramda'\nimport { createContext, Reducer, useEffect, useMemo, useReducer } from 'react'\nimport { logger } from '../util/logger'\nimport { GuessState } from './guess'\n\nexport type ScoreState = {\n  foundWords: string[],\n  remainingWords: string[]\n}\n\nexport enum ScoreAction {\n  AddGuess = 'add-guess'\n}\n\nexport enum ScoreType {\n  Letters = 'l',\n  Length = 'w'\n}\n\nenum InternalScoreAction {\n  UpdateDictionary = 'update-dictionary'\n}\n\nexport type ScoreReducerAction<A extends ScoreAction> = {\n  type: A,\n  info: A extends ScoreAction.AddGuess ? string : never\n}\n\ntype InternalScoreReducerAction<A extends InternalScoreAction | ScoreAction> = {\n  type: A,\n  info: A extends ScoreAction.AddGuess\n    ? string\n    : A extends InternalScoreAction.UpdateDictionary\n    ? string[]\n    : never\n}\n\nconst handleAddGuess = (state: ScoreState, guess: string): ScoreState => {\n  const { foundWords, remainingWords } = state\n  if(remainingWords.includes(guess)) {\n    return {\n      foundWords: [...foundWords, guess],\n      remainingWords: R.filter(word => word !== guess, remainingWords)\n    }\n  }\n\n  return state\n}\n\nconst handleUpdateDictionary = (state: ScoreState, dictionary: string[]): ScoreState => {\n  return {\n    foundWords: [],\n    remainingWords: dictionary\n  }\n}\n\nconst scoreReducer = <A extends ScoreAction | InternalScoreAction>(state: ScoreState, action: InternalScoreReducerAction<A>): ScoreState => {\n  switch (action.type) {\n    case ScoreAction.AddGuess:\n      return handleAddGuess(state, action.info as string)\n    case InternalScoreAction.UpdateDictionary:\n      return handleUpdateDictionary(state, action.info as string[])\n    default:\n      throw new Error(`${action.type} action has not been implemented!`)\n  }\n}\n\nexport const useScore = (guessState: GuessState, boardDictionaryState: { boardDictionary: string[] }) => {\n\n  const [state, dispatch] = useReducer<Reducer<ScoreState, InternalScoreReducerAction<ScoreAction | InternalScoreAction>>>(scoreReducer, {\n    foundWords: [],\n    remainingWords: []\n  })\n\n  const lastGuess = useMemo(() => guessState.guesses[guessState.guesses.length - 1], [guessState])\n\n  useEffect(() => {\n    logger.debug('running score useEffect, dispatch score update...')\n    logger.debug(`Last Guess: ${lastGuess}`)\n    dispatch({ type: ScoreAction.AddGuess, info: lastGuess })\n  }, [lastGuess, dispatch])\n\n  useEffect(() => {\n    logger.debug('running second useScore use effect... update dictionary')\n    dispatch({ type: InternalScoreAction.UpdateDictionary, info: boardDictionaryState.boardDictionary })\n  }, [boardDictionaryState, dispatch])\n\n  return state\n}\n\nexport type ScoreContext = ScoreState\n\nexport const Score = createContext<ScoreContext>({\n  foundWords: [],\n  remainingWords: []\n})\n","type Primitive = string | number\nconst isPrimitive = (item: any): item is Primitive => {\n  return typeof item === 'number' || typeof item === 'string'\n}\n\nconst getCallingFunction = () => {\n  const stack = (new Error()).stack?.split('\\n')\n  if (stack === undefined || stack.length === 0) return\n\n  // Error\n  // at getCallingFunction\n  // at Object.push../src/util/logger.ts...\n  // at {calling function}\n  const parentCallLine = stack[3]\n\n  const anonFunction = /^\\s*at\\shttp/i\n\n  if (parentCallLine === undefined || anonFunction.test(parentCallLine)) return\n\n  const getCallee = /^\\s*(at\\s+[\\w\\d_-]+).*$/\n\n  const callee = parentCallLine.replace(getCallee, '$1')\n\n  return callee\n}\n\nexport const logger = {\n  error: console.error,\n  info: console.info,\n  debug: process.env.NODE_ENV === 'production' ? (..._: any[]) => {} : (...logs: any[]) => {\n    const logString = logs.map(log => {\n      if (isPrimitive(log)) return log.toString()\n\n      try {\n        return JSON.stringify(log)\n      } catch(e: any) {\n        if (typeof log.toString === 'function') return log.toString() as string\n        return `${log}`\n      }\n    }).join('\\n')\n\n    const callee = getCallingFunction()\n\n    if (!callee) {\n      console.debug(logString)\n      return\n    }\n\n    console.debug(logString, callee)\n  }\n}\n","import * as R from 'ramda'\nimport { createContext, useState } from 'react'\nimport { MetadataV1 } from './language'\nimport { ScoreType } from './score'\nimport { splitWordIntoLetters } from './words'\n\nexport const getLetterScore = (letter: string, letterScores: MetadataV1['letterScores']) => letterScores[letter]\n\nconst scoreWordByLetterScores = (word: string, letterScores: { [key: string]: number }) => R.pipe<string, string[], number>(\n  word => splitWordIntoLetters(word, Object.keys(letterScores)),\n  R.reduce<string, number>((acc, letter) => acc + letterScores[letter], 0)\n)(word)\n\n// Reference: https://github.com/lexica/lexica/blob/08da51d6693f039cb81e9063544679f74b35fdf0/app/src/main/java/com/serwylo/lexica/game/Game.java#L71\nconst lengthScores = [\n  0, 0, 0, // 0,1,2\n  1, 1, 2, // 3,4,5\n  3, 5, 8, // 6,7,8\n  13, 21, 34, // 9,10,11\n  55, 89, 144, // 12,13,14\n  233, 377, 610, //14,15,16\n  987, 1597, 2584, // 17,18,19\n  4181, 6765, 10946, // 20,21,22\n  17711, 28657, 46368, // 23,24,25\n]\n\nconst scoreWordByLength = ({ length }: string) => lengthScores[length]\n\nexport const scoreWord = (word: string, scoreType: ScoreType, letterScores: MetadataV1['letterScores']) => {\n  switch (scoreType) {\n    case ScoreType.Letters:\n      return scoreWordByLetterScores(word, letterScores)\n    case ScoreType.Length:\n      return scoreWordByLength(word)\n    default:\n      return 0\n  }\n}\n\nexport const orderByWordScore = (dictionary: string[], scoreType: ScoreType, letterScores: MetadataV1['letterScores']) => R.sortWith(\n  [R.descend<string>((word) => scoreWord(word, scoreType, letterScores)), R.ascend<string>(R.identity)],\n  dictionary\n)\n\nexport type LetterScoresContext = { [key: string]: number }\n\nexport const LetterScores = createContext<LetterScoresContext>({})\n\nexport enum GameType {\n  Invite = 'invite',\n  Create = 'create'\n}\n\nexport const useGameType = () => {\n  const [gameType, setGameType] = useState(GameType.Invite)\n\n  return {\n    gameType,\n    setGameType\n  }\n}\n\nexport const CurrentGameType = createContext<GameType>(GameType.Invite)\n","import * as R from 'ramda'\n\nexport const orderWordAlphabetically = (line: string, dedupe: boolean = false) => {\n  const orderedLine = R.pipe<string, string[], string[], string>(\n    R.splitEvery(1) as any as (a: string) => string[],\n    R.sort((a: string, b: string) => a.charCodeAt(0) - b.charCodeAt(0)),\n    R.join('')\n  )(line)\n\n  const removeDuplicates = R.pipe<string, string[], string[], string>(\n    R.splitEvery(1) as any as (a: string) => string[],\n    R.uniq as (a: string[]) => string[],\n    R.join('')\n  )\n\n  return dedupe ? removeDuplicates(orderedLine) : orderedLine\n}\n\nexport type LetterCount = {\n  [key: string]: number\n}\n\nexport type SortFn = (letters: string[]) => string[]\nexport const sort = {\n  byLength: R.sortWith([\n    R.descend(R.prop('length')),\n    R.ascend(R.identity)\n  ]) as SortFn,\n  alphabetically: R.sort(R.ascend(R.identity)) as SortFn\n}\n\nexport const splitWordIntoLetters = (word: string, letters: string[], sortWith?: (letters: string[]) => string[]) => {\n  const orderedLetters = sort.byLength(letters)\n  let w = word\n  const response: string[] = []\n  while (w.length) {\n    const startingLength = w.length\n    for (const letter of orderedLetters) {\n      if (w.indexOf(letter) === 0) {\n        w = w.substring(letter.length)\n        response.push(letter)\n        break\n      }\n    }\n    const endingLength = w.length\n    if (startingLength === endingLength) {\n      throw new Error(`Cannot match next letter in word to given letters, remaining word: ${w}, letters: ${JSON.stringify(letters)}`)\n    }\n  }\n\n  if (sortWith) return sortWith(response)\n\n  return response\n}\n","import { Reducer, useCallback, useEffect, useMemo, useReducer, useState } from 'react'\n\nimport { logger } from './logger'\n\nexport enum ElementIdentifier {\n  Class = 'class',\n  Id = 'id',\n  Type = 'type'\n}\n\nconst getElementBasedOnIdentifier = (type: ElementIdentifier, identifier: string) => {\n  switch (type) {\n    case ElementIdentifier.Class:\n      return document.getElementsByClassName(identifier)[0]\n    case ElementIdentifier.Id:\n      return document.getElementById(identifier) as HTMLElement\n    case ElementIdentifier.Type:\n      return document.getElementsByTagName(identifier)[0]\n  }\n}\n\nexport type ElementSizeInfo = {\n  location: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number\n  },\n  size: {\n    width: number,\n    height: number\n  }\n}\n\nexport const useElementSize = (identifierType: ElementIdentifier, identifier: string) => {\n  const { elementName, elementNameType } = useMemo(\n    () => ({ elementName: identifier, elementNameType: identifierType }),\n    [identifier, identifierType]\n  )\n  const [element, setElement] = useState<Element | undefined>()\n  const [size, setSize] = useState<ElementSizeInfo>({\n    location: { top: 0, right: 0, bottom: 0, left: 0 },\n    size: { width: 0, height: 0 }\n  })\n\n  const resizeCallback = useCallback((el: Element | undefined = element) => {\n    if (el) {\n      const {\n        top, right, bottom, left\n      } = el.getBoundingClientRect()\n      setSize({\n        location: { top, right, bottom, left },\n        size: { width: right - left, height: bottom - top }\n      })\n    }\n  }, [element])\n  useEffect(() => {\n    logger.debug('getting element...')\n    const element = getElementBasedOnIdentifier(elementNameType, elementName)\n    setElement(element)\n    resizeCallback(element)\n  }, [setElement, resizeCallback, elementName, elementNameType])\n\n\n  useEffect(() => {\n    logger.debug('running element size 2nd useEffect...')\n    const eventListener = () => resizeCallback()\n    window.addEventListener('resize', eventListener)\n    return () => window.removeEventListener('resize', eventListener)\n  }, [resizeCallback])\n\n  return size\n}\n\nexport const useScreenSize = () => {\n  const [size, setSize] = useState({\n    width: document.documentElement.clientWidth,\n    height: document.documentElement.clientHeight\n  })\n\n  useEffect(() => {\n    const callback = () => setSize({\n      width: document.documentElement.clientWidth,\n      height: document.documentElement.clientHeight\n    })\n\n    window.addEventListener('resize', callback)\n\n    return () => window.removeEventListener('resize', callback)\n  }, [setSize])\n\n  return size\n}\n\nexport enum ScreenOrientation {\n  Landscape = 'landscape',\n  Portrait = 'portrait'\n}\n\ntype OrientationAction = { width: number, height: number }\n\nexport const useOrientation = () => {\n  const { size } = useElementSize(ElementIdentifier.Type, 'body')\n\n  const [orientation, setOrientation] = useReducer<Reducer<ScreenOrientation, OrientationAction>>(\n    ((state, { width, height}) => {\n      const newOrientation = height >= width\n        ? ScreenOrientation.Portrait\n        : ScreenOrientation.Landscape\n      if (newOrientation !== state) {\n        return newOrientation\n      }\n      return state\n    }),\n    ScreenOrientation.Landscape\n  )\n\n  useEffect(() => {\n    logger.debug('updating orientation')\n    setOrientation(size)\n  }, [size, setOrientation])\n  return orientation\n}\n\nexport const usePromise = <T>(p: Promise<T>, initialValue?: T): typeof initialValue extends undefined ? T | undefined : T => {\n  const [resolved, setResolved] = useState<T>(initialValue!)\n\n  useEffect(() => {\n    p.then(val => setResolved(val))\n  }, [p])\n\n  return resolved as any\n}\n","import * as R from 'ramda'\nimport { useEffect, useState } from 'react'\nimport { logger } from './logger'\n\nconst SamePageEventType = 'same-page-storage' as const\nObject.freeze(SamePageEventType)\n\nexport type UseEffectCleanup = () => void\n\nexport type Get<D> = {\n  key: string,\n  parser?: (val: string) => D\n}\n\nexport type GetWithDefault<D> = Get<D> & { defaultValue: D }\n\nconst get = <D>({ key, parser = JSON.parse }: Get<D>) => {\n  const item = localStorage.getItem(key)\n\n  return !R.isNil(item) ? parser(item) : item\n}\n\nconst getWithDefault = <D>({ key, parser = JSON.parse, defaultValue }: GetWithDefault<D>): D => {\n  const item = localStorage.getItem(key)\n\n  return item ? parser(item) : defaultValue\n}\n\nconst isString = (item: any): item is string => typeof item === 'string'\n\nconst set = (key: string, item: any) => {\n  const value = isString(item) ? item : JSON.stringify(item)\n  localStorage.setItem(key, value)\n  window.dispatchEvent(getSamePageEvent(key, value))\n}\n\ntype SamePageEvent = ReturnType<typeof getSamePageEvent>\n\nconst getSamePageEvent = (key: string, value: string) => new CustomEvent(SamePageEventType, {\n  bubbles: true,\n  cancelable: false,\n  detail: { key, value }\n})\n\nexport const useStorage = <I>(key: string, initialValue: I, parser: (value: string) => I = JSON.parse) => {\n  const [item, setItem] = useState(initialValue)\n\n  useEffect(() => {\n    const eventHandler = (e: SamePageEvent) => {\n      if (e.detail.key !== key) return\n      logger.debug(`handling event for key: ${key}`)\n\n      setItem(parser(e.detail.value))\n    }\n\n    const item = get({ key, parser })\n    \n    if (item) setItem(item)\n\n    window.addEventListener(SamePageEventType as any, eventHandler)\n\n    return () => window.removeEventListener(SamePageEventType as any, eventHandler)\n  }, [setItem, parser, key])\n\n  return item\n}\n\ntype StorageConstructor<T> = {\n  key: string,\n  initialValueIfNull?: T,\n  parser?: (value: string) => T,\n  serializer?: (value: T) => string\n}\n\nexport class GameStorage<T> {\n  public key: string\n  private parse: (value: string) => T\n  private serialize: (value: T) => string\n  constructor({\n    key,\n    initialValueIfNull,\n    parser = JSON.parse,\n    serializer = JSON.stringify\n  }: StorageConstructor<T>) {\n    this.key = key\n    this.parse = parser\n    this.serialize = serializer\n    const storedValue = localStorage.getItem(key)\n    if (storedValue === null && initialValueIfNull !== undefined)\n      localStorage.setItem(key, serializer(initialValueIfNull))\n  }\n\n  public get() {\n    const value = localStorage.getItem(this.key) as string\n    return this.parse(value)\n  }\n\n  public set(value: T) {\n    const serialized = this.serialize(value)\n    localStorage.setItem(this.key, serialized)\n    const result = window.dispatchEvent(getSamePageEvent(this.key, serialized))\n    logger.debug(`fired window event... result: ${result}`)\n  }\n}\n\nexport const storage = {\n  get,\n  getWithDefault,\n  set,\n}\n","import axios from 'axios'\nimport * as R from 'ramda'\nimport { createContext, useEffect, useMemo, useState } from 'react'\nimport { usePromise } from '../util/hooks'\n\nimport { logger } from '../util/logger'\nimport { storage, useStorage } from '../util/storage'\n\nexport type MetadataV1 = {\n  name: string,\n  locale: string,\n  isBeta: boolean,\n  definitionUrl: string,\n  letterProbabilities: { [key: string]: number[] },\n  letterScores: { [key: string]: number }\n}\n\nexport type LanguageState = {\n  loading: boolean,\n  error: boolean,\n  metadata: MetadataV1,\n  dictionary: string[]\n}\n\nexport enum LocalStorage {\n  LanguageCode = 'game-language'\n}\n\nconst getBaseUrl = () => `https://lexica.github.io`\n\nconst getAvailableLanguages = () => axios.get<string[]>(\n  `${getBaseUrl()}/lexica/api/v1/languages.json`\n).then(({ data }) => data)\n\nconst getAllMetadata = () => axios.get<MetadataV1[]>(\n  `${getBaseUrl()}/lexica/api/v1/metadata.json`\n).then(({ data }) => data)\n\nexport const getLanguageMetadata = (languageCode: string) => axios.get<MetadataV1>(\n  `${getBaseUrl()}/lexica/api/v1/language/${languageCode}/metadata.json`\n).then(({ data }) => data)\n\nconst getDictionary = (languageCode: string) => axios.get<string[]>(\n  `${getBaseUrl()}/lexica/api/v1/language/${languageCode}/dictionary.json`\n).then(({ data }) => data)\n\nexport const useLanguage = (languageCode: string) => {\n  const [state, setState] = useState<LanguageState>({\n    loading: true,\n    error: false,\n    metadata: { name: '', locale: '', isBeta: true, definitionUrl: '', letterProbabilities: {}, letterScores: {} },\n    dictionary: []\n  })\n\n  useEffect(() => {\n    logger.debug('running language useEffect...')\n    if (languageCode.length) {\n      Promise.all([\n        getLanguageMetadata(languageCode),\n        getDictionary(languageCode)\n      ]).then(([metadata, dictionary]) => {\n        setState({\n          loading: false,\n          error: false,\n          dictionary,\n          metadata\n        })\n      }).catch((err) => {\n        setState({\n          loading: false,\n          error: true,\n          dictionary: [],\n          metadata: {} as any\n        })\n        return err\n      })\n\n    }\n  }, [languageCode, setState])\n\n  return state\n}\n\nexport const setLanguageInLocalStorage = (languageCode: string) => {\n  storage.set(LocalStorage.LanguageCode, languageCode)\n}\n\nconst languageCodeDefault = () => storage.getWithDefault({\n  key: LocalStorage.LanguageCode,\n  parser: R.identity,\n  defaultValue: 'en_US'\n})\n\nexport const useLanguageCodeFromLocalStorage = () => {\n  const code = useStorage<string>(LocalStorage.LanguageCode, languageCodeDefault(), R.identity)\n  useEffect(() => {\n    logger.debug('updated language code:', code)\n  }, [code])\n  return code\n}\n\nexport const useLanguageFromLocalStorage = () => {\n  const languageCode = useLanguageCodeFromLocalStorage()\n  const language = useLanguage(languageCode)\n  return language\n}\n\nexport type LanguageContext = {\n  metadata: MetadataV1,\n  dictionary: string[],\n  loading: boolean,\n  error: boolean\n}\n\nexport const Language = createContext<LanguageContext>({\n  metadata: {\n    name: '',\n    locale: '',\n    letterScores: {},\n    letterProbabilities: {},\n    isBeta: true,\n    definitionUrl: ''\n  },\n  dictionary: [],\n  loading: true,\n  error: false\n})\n\nexport const useAvailableLanguageCodes = () => {\n  const languages = usePromise(getAvailableLanguages(), [])\n\n  return {\n    languages,\n    loading: languages.length === 0\n  }\n}\n\ntype MLMRState = {\n  [key: string]: MetadataV1\n}\n\nexport const useMultipleLanguageMetadata = () => {\n  const [loading, setLoading] = useState(true)\n  const [metadata, setMetadata] = useState<MLMRState>({})\n\n  useEffect(() => {\n    getAllMetadata().then(metadatas => {\n      const reduced = metadatas.reduce((acc, metadata) => ({ ...acc, [metadata.name]: metadata }), {} as MLMRState)\n      setMetadata(reduced)\n      setLoading(false)\n    })\n\n  }, [setMetadata, setLoading])\n\n  return useMemo(() => ({ loading, metadata }), [loading, metadata])\n}\n","\nexport const HighestSupportedMinimumVersion = 20017\n\nexport enum BreakingChanges {\n  Base64EncodedMultiplayerBoard = 20017\n}\n","\nexport const parseURLSearch = <T = any>(search: string): T => {\n  const keyValuePairs = search.replace('?', '').split('&')\n  return keyValuePairs.reduce((acc: Partial<T>, keyValuePair: string) => {\n    const [key, value] = keyValuePair.split('=')\n    return {\n      ...acc,\n      [decodeURI(key) as keyof T]: decodeURI(value) as unknown as T[keyof T]\n    }\n  }, {} as Partial<T>) as T\n}","import { Duration, toSeconds } from 'duration-fns'\nimport { useMemo } from 'react'\nimport { useLocation } from 'react-router'\nimport { utf8ToB64 } from '../util/base-64'\nimport { HighestSupportedMinimumVersion } from '../util/compatibility-android'\nimport { parseURLSearch } from '../util/url'\nimport { ScoreType } from './score'\n\nenum GameParamMap {\n  Board = 'b',\n  Language = 'l',\n  Time = 't',\n  Score = 's',\n  MinimumWordLength = 'm',\n  MinimumVersion = 'mv',\n  Version = 'v',\n  TimeAttack = 'ta'\n}\n\nconst encodeBoard = (board: string[]): string => {\n  const stringified = board.join(',')\n\n  return utf8ToB64(stringified).replace(/=+$/, '')\n}\n\nexport type GetSearchStringArgs = {\n  board: string[],\n  language: string,\n  time: Duration,\n  score: ScoreType,\n  minimumWordLength: number\n  timeAttack?: number\n}\n\nexport const getSearchString = ({\n  board: boardArray,\n  language,\n  time: duration,\n  score,\n  minimumWordLength,\n  timeAttack\n}: GetSearchStringArgs) => {\n  const board = encodeBoard(boardArray)\n  const time = toSeconds(duration)\n\n  const keyValuePairs: ([string, string | number])[] = [\n    [GameParamMap.Board, board],\n    [GameParamMap.Language, language],\n    [GameParamMap.Time, time],\n    [GameParamMap.Score, score],\n    [GameParamMap.MinimumWordLength, minimumWordLength],\n    [GameParamMap.MinimumVersion, HighestSupportedMinimumVersion],\n    [GameParamMap.Version, HighestSupportedMinimumVersion]\n  ]\n\n  timeAttack && keyValuePairs.push([GameParamMap.TimeAttack, timeAttack])\n\n  return `?${keyValuePairs.map(kv => kv.join('=')).join('&')}`\n}\n\nexport type GameURLParams = {\n  b: string,\n  l: string,\n  t: string,\n  s: ScoreType,\n  m: string,\n  mv: string,\n  v: string,\n  ta?: string\n}\n\nconst parseGameParameters = (urlParams: GameURLParams) => {\n  const language = urlParams[GameParamMap.Language]\n  const minimumVersion = parseInt(urlParams[GameParamMap.MinimumVersion])\n  const timeAttack = urlParams?.ta && parseInt(urlParams.ta)\n\n  return {\n    board: urlParams[GameParamMap.Board],\n    language,\n    time: parseInt(urlParams[GameParamMap.Time]),\n    score: urlParams[GameParamMap.Score],\n    minimumWordLength: parseInt(urlParams[GameParamMap.MinimumWordLength]),\n    minimumVersion,\n    version: parseInt(urlParams[GameParamMap.Version]),\n    timeAttack\n  }\n}\n\nexport const useGameUrlParameters = () => {\n  const location = useLocation()\n  return useMemo(() => parseGameParameters(parseURLSearch<GameURLParams>(location.search)), [location.search])\n}\n","import { Duration } from 'duration-fns'\nimport { ScoreType } from '../score'\n\nexport type RulesContext = {\n  minimumWordLength: number,\n  time: Duration,\n  score: ScoreType,\n  boardWidth: number,\n  name: string\n  timeAttack?: number\n}\n\nexport type Ruleset = RulesContext & { name: string, boardWidth: number }\n\nexport type Rulesets = {\n  [key: string]: Ruleset\n} & {\n  [P in DefaultRulesets]: Ruleset\n}\n\nexport enum LocalStorage {\n  CurrentRulesetId = 'current-rule-set',\n  Rulesets = 'rulesets',\n  DefaultRulesets = 'default-rulesets'\n}\n\nexport enum DefaultRulesets {\n  Sprint = 'sprint',\n  Marathon = 'marathon',\n  LetterPoints = 'letter-points',\n  TimeAttack = 'time-attack'\n}\n","// Adapted from https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_1_%E2%80%93_escaping_the_string_before_encoding_it\nexport const utf8ToB64 = (utf8: string) => {\n  return window.btoa(unescape(encodeURIComponent(utf8)))\n}\n\nexport const b64ToUtf8 = (b64: string) => {\n  return decodeURIComponent(escape(window.atob(b64)))\n}","import * as R from 'ramda'\nimport { createContext, useEffect, useMemo, useReducer, useState } from 'react'\n\nimport { MetadataV1, getLanguageMetadata } from '../language'\nimport { useGameUrlParameters } from '../url'\nimport { splitWordIntoLetters } from '../words'\n\nimport { b64ToUtf8 } from '../../util/base-64'\n\nconst getRandomInt = (max: number) => Math.floor(Math.random() * max)\n\nconst shuffle = (unshuffledBoard: string[]) => {\n  const toShuffle = [...unshuffledBoard]\n  for (let currentIndex = toShuffle.length - 1; currentIndex > 0; currentIndex--) {\n    const randomIndex = Math.floor(Math.random() * (currentIndex + 1))\n    const randomLetter = toShuffle[randomIndex]\n    const currentLetter = toShuffle[currentIndex]\n    toShuffle[randomIndex] = currentLetter\n    toShuffle[currentIndex] = randomLetter\n  }\n  return toShuffle\n}\n\nconst generateBoard = (letterCount: number, letters: string[], ogProbabilities: MetadataV1['letterProbabilities']) => {\n  const keys = Object.keys(ogProbabilities)\n  const probabilities = keys.reduce(\n    (acc, key) => ({ ...acc, [key]: [...ogProbabilities[key]]}),\n    {} as MetadataV1['letterProbabilities']\n  )\n  const unshuffledBoard = R.times(() => {\n    const mapping = R.reduce((acc, l) => [...acc, ...R.times(() => l, probabilities[l][0])], [] as string[], letters)\n\n    const result = mapping[getRandomInt(mapping.length)]\n    probabilities[result].length > 1 ? probabilities[result].splice(0, 1) : probabilities[result][0] = 0\n    return result\n  }, letterCount)\n\n  return shuffle(unshuffledBoard)\n}\n\nexport const useGeneratedBoard = (width: number, languageMetadata: MetadataV1) => {\n  const [board, setBoard] = useState([''])\n\n  const [refreshTrigger, refreshBoard] = useReducer((state: number) => state + 1, 0)\n  useEffect(() => {\n    if (!languageMetadata) return\n\n    const { letterProbabilities } = languageMetadata\n    const letters = Object.keys(letterProbabilities)\n    if (letters.length === 0) return\n\n    const iterations = width * width\n\n    setBoard(generateBoard(iterations, letters, letterProbabilities))\n  }, [setBoard, width, languageMetadata, refreshTrigger])\n\n  return { board, refreshBoard }\n}\n\nconst getB64DelimitedURLBoard = ({ board, delimiter }: { board: string, delimiter: string }) => {\n  const decoded = b64ToUtf8(board)\n  return decoded.split(delimiter)\n}\n\nconst getLanguageLetters = (language: string) => getLanguageMetadata(language)\n  .then(({ letterScores }) => Object.keys(letterScores))\n\nconst getUndelimitedURLBoard = async ({ board, language }: { board: string, language: string }) => {\n  const letters = await getLanguageLetters(language)\n\n  return splitWordIntoLetters(board, letters)\n}\n\ntype GetBoardParams = {\n  minimumVersion: number,\n  board: string,\n  language: string\n}\n\nconst getURLBoard = ({ minimumVersion, board, language }: GetBoardParams) => {\n  if (minimumVersion >= 20017) return Promise.resolve(getB64DelimitedURLBoard({ board, delimiter: ',' }))\n  return getUndelimitedURLBoard({ board, language })\n}\n\nexport const useBoardFromUrl = () => {\n  const params = useGameUrlParameters()\n  const [board, setBoard] = useState([''])\n  const boardPromise = useMemo(() => getURLBoard(params), [params])\n\n  useEffect(() => {\n    boardPromise.then(setBoard)\n  }, [boardPromise, setBoard])\n\n  return board\n}\n\nexport const Board = createContext<string[]>([''])\n\nexport const BoardRefresh = createContext<() => void>(() => {})\n","/** Auto-generated */\n\nimport * as en from './languages/en'\nimport * as ar from './languages/ar'\nimport * as bg from './languages/bg'\nimport * as bn from './languages/bn'\nimport * as ca from './languages/ca'\nimport * as cs from './languages/cs'\nimport * as da from './languages/da'\nimport * as de from './languages/de'\nimport * as el from './languages/el'\nimport * as eo from './languages/eo'\nimport * as es from './languages/es'\nimport * as et from './languages/et'\nimport * as fa from './languages/fa'\nimport * as fi from './languages/fi'\nimport * as fr from './languages/fr'\nimport * as he from './languages/he'\nimport * as hi from './languages/hi'\nimport * as hr from './languages/hr'\nimport * as hu from './languages/hu'\nimport * as it from './languages/it'\nimport * as ja from './languages/ja'\nimport * as kmr from './languages/kmr'\nimport * as lt from './languages/lt'\nimport * as mr from './languages/mr'\nimport * as nb_rNO from './languages/nb-rNO'\nimport * as nl from './languages/nl'\nimport * as pl from './languages/pl'\nimport * as pt from './languages/pt'\nimport * as pt_rBR from './languages/pt-rBR'\nimport * as pt_rPT from './languages/pt-rPT'\nimport * as ru from './languages/ru'\nimport * as sat from './languages/sat'\nimport * as sk from './languages/sk'\nimport * as sv from './languages/sv'\nimport * as th from './languages/th'\nimport * as tr from './languages/tr'\nimport * as uk from './languages/uk'\nimport * as vi from './languages/vi'\nimport * as zh_rCN from './languages/zh-rCN'\nimport * as zh_rTW from './languages/zh-rTW'\n\nexport enum ImplementedLanguage {\n  English = 'en',\n  Arabic = 'ar',\n  Bulgarian = 'bg',\n  Bengali = 'bn',\n  Catalan = 'ca',\n  Czech = 'cs',\n  Danish = 'da',\n  German = 'de',\n  ModernGreek1453 = 'el',\n  Esperanto = 'eo',\n  Spanish = 'es',\n  Estonian = 'et',\n  Persian = 'fa',\n  Finnish = 'fi',\n  French = 'fr',\n  Hebrew = 'he',\n  Hindi = 'hi',\n  Croatian = 'hr',\n  Hungarian = 'hu',\n  Italian = 'it',\n  Japanese = 'ja',\n  NorthernKurdish = 'kmr',\n  Lithuanian = 'lt',\n  Marathi = 'mr',\n  NorwegianBokml_Norway = 'nb-rNO',\n  Dutch = 'nl',\n  Polish = 'pl',\n  Portuguese = 'pt',\n  Portuguese_Brazil = 'pt-rBR',\n  Portuguese_Portugal = 'pt-rPT',\n  Russian = 'ru',\n  Santali = 'sat',\n  Slovak = 'sk',\n  Swedish = 'sv',\n  Thai = 'th',\n  Turkish = 'tr',\n  Ukrainian = 'uk',\n  Vietnamese = 'vi',\n  Chinese_China = 'zh-rCN',\n  Chinese_TaiwanProvinceofChina = 'zh-rTW',\n}\n\n\ntype DefaultTranslation = typeof en\ntype DefaultKeys = keyof DefaultTranslation\n\nexport type GeneralTranslation = { [P in DefaultKeys]?: Partial<DefaultTranslation[P]> }\nexport type Translation = DefaultTranslation\n\nexport const defaultTranslation = en\n\n\nexport const languageCodeToTranslationsMap: { [P in ImplementedLanguage]: GeneralTranslation } = {\n  [ImplementedLanguage.English]: en,\n  [ImplementedLanguage.Arabic]: ar,\n  [ImplementedLanguage.Bulgarian]: bg,\n  [ImplementedLanguage.Bengali]: bn,\n  [ImplementedLanguage.Catalan]: ca,\n  [ImplementedLanguage.Czech]: cs,\n  [ImplementedLanguage.Danish]: da,\n  [ImplementedLanguage.German]: de,\n  [ImplementedLanguage.ModernGreek1453]: el,\n  [ImplementedLanguage.Esperanto]: eo,\n  [ImplementedLanguage.Spanish]: es,\n  [ImplementedLanguage.Estonian]: et,\n  [ImplementedLanguage.Persian]: fa,\n  [ImplementedLanguage.Finnish]: fi,\n  [ImplementedLanguage.French]: fr,\n  [ImplementedLanguage.Hebrew]: he,\n  [ImplementedLanguage.Hindi]: hi,\n  [ImplementedLanguage.Croatian]: hr,\n  [ImplementedLanguage.Hungarian]: hu,\n  [ImplementedLanguage.Italian]: it,\n  [ImplementedLanguage.Japanese]: ja,\n  [ImplementedLanguage.NorthernKurdish]: kmr,\n  [ImplementedLanguage.Lithuanian]: lt,\n  [ImplementedLanguage.Marathi]: mr,\n  [ImplementedLanguage.NorwegianBokml_Norway]: nb_rNO,\n  [ImplementedLanguage.Dutch]: nl,\n  [ImplementedLanguage.Polish]: pl,\n  [ImplementedLanguage.Portuguese]: pt,\n  [ImplementedLanguage.Portuguese_Brazil]: pt_rBR,\n  [ImplementedLanguage.Portuguese_Portugal]: pt_rPT,\n  [ImplementedLanguage.Russian]: ru,\n  [ImplementedLanguage.Santali]: sat,\n  [ImplementedLanguage.Slovak]: sk,\n  [ImplementedLanguage.Swedish]: sv,\n  [ImplementedLanguage.Thai]: th,\n  [ImplementedLanguage.Turkish]: tr,\n  [ImplementedLanguage.Ukrainian]: uk,\n  [ImplementedLanguage.Vietnamese]: vi,\n  [ImplementedLanguage.Chinese_China]: zh_rCN,\n  [ImplementedLanguage.Chinese_TaiwanProvinceofChina]: zh_rTW,\n}\n","import { Duration } from 'duration-fns'\nimport * as R from 'ramda'\nimport { v4 as uuid } from 'uuid'\n\nimport { DefaultRulesets, LocalStorage, Ruleset, Rulesets } from './types'\nimport { ScoreType } from '../score'\nimport { GameStorage } from '../../util/storage'\n\nexport const defaultRulesets: { [P in DefaultRulesets]: Ruleset } = {\n  [DefaultRulesets.Sprint]: {\n    name: 'Sprint',\n    time: { minutes: 3 } as Duration,\n    boardWidth: 4,\n    score: ScoreType.Length,\n    minimumWordLength: 3\n  },\n  [DefaultRulesets.Marathon]: {\n    name: 'Marathon',\n    time: { minutes: 30 } as Duration,\n    boardWidth: 6,\n    score: ScoreType.Length,\n    minimumWordLength: 5\n  },\n  [DefaultRulesets.LetterPoints]: {\n    name: 'Letter Points',\n    time: { minutes: 3 } as Duration,\n    boardWidth: 5,\n    score: ScoreType.Letters,\n    minimumWordLength: 4\n  },\n  [DefaultRulesets.TimeAttack]: {\n    name: 'Time Attack',\n    time: { minutes: 1 } as Duration,\n    boardWidth: 6,\n    score: ScoreType.Length,\n    minimumWordLength: 3,\n    timeAttack: 2\n  }\n}\n\nconst rulesetStorage = new GameStorage<Rulesets>({\n  key: LocalStorage.Rulesets,\n  initialValueIfNull: defaultRulesets\n})\n\nconst currentRulesetIdStorage = new GameStorage<string>({\n  key: LocalStorage.CurrentRulesetId,\n  initialValueIfNull: DefaultRulesets.Sprint,\n  serializer: R.identity,\n  parser: R.identity\n})\n\nexport const getRulesets = (): Rulesets => {\n  return rulesetStorage.get()\n}\n\nexport const getRuleset = (id: string): Ruleset => {\n  const rulesets = getRulesets()\n  return rulesets[id]\n}\n\nexport const addRuleset = (ruleset: Ruleset) => {\n  const id = uuid()\n  const rulesets = rulesetStorage.get()\n  rulesetStorage.set({\n    ...rulesets,\n    [id]: ruleset\n  })\n  return id\n}\n\nexport const setCurrentRuleset = (id: string) => {\n  currentRulesetIdStorage.set(id)\n}\n\n","import { createContext, useEffect, useMemo, useState } from 'react'\nimport { normalize } from 'duration-fns'\nimport * as R from 'ramda'\n\nimport { DefaultRulesets, LocalStorage, RulesContext, Rulesets } from './types'\nimport { defaultRulesets, getRuleset } from './util'\n\nimport { useGameUrlParameters } from '../url'\nimport { useStorage } from '../../util/storage'\n\nexport const useRulesFromStorage = (): [context: RulesContext, id: string] => {\n  const id = useStorage(LocalStorage.CurrentRulesetId, DefaultRulesets.Sprint as string, R.identity)\n\n  const [ruleset, setRuleset] = useState(getRuleset(id))\n\n  useEffect(() => {\n    setRuleset(getRuleset(id))\n  }, [setRuleset, id])\n\n\n  return [ruleset, id]\n}\n\nexport const useRulesFromQueryString = (board: string[]): RulesContext => {\n  const params = useGameUrlParameters()\n\n  return useMemo(() => {\n    return {\n      minimumWordLength: params.minimumWordLength,\n      time: normalize({ seconds: params.time }),\n      score: params.score,\n      boardWidth: Math.floor(Math.sqrt(board.length)),\n      name: 'Shared with you',\n      timeAttack: params.timeAttack\n    } as RulesContext\n  }, [params, board])\n}\n\nexport const useDefaultRules = (): RulesContext => {\n  return useMemo(() => getRuleset(DefaultRulesets.Sprint), [])\n}\n\nexport const useRulesets = (): Rulesets => {\n  const rulesets = useStorage(LocalStorage.Rulesets, defaultRulesets)\n  return rulesets\n}\n\nexport const Rules = createContext<RulesContext>(getRuleset(DefaultRulesets.Sprint))\n\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Catalan',\n  'de_DE': 'German (Extended)',\n  'de_DE_no_diacritics': 'German',\n  'es': 'Spanish',\n  'es_solo_enne': 'Spanish only Ñ',\n  'fa': 'Persian',\n  'fr_FR': 'French (Extended)',\n  'fr_FR_no_diacritics': 'French',\n  'hu': 'Hungarian',\n  'it': 'Italian',\n  'ja': 'Japanese',\n  'nl': 'Dutch',\n  'pl': 'Polish',\n  'pt_BR': 'Portuguese (Brazil) (Extended)',\n  'pt_BR_no_diacritics': 'Portuguese (Brazil)',\n  'ru': 'Russian',\n  'ru_extended': 'Russian (Extended)',\n  'en_GB': 'English (UK)',\n  'uk': 'Ukrainian',\n  'en_US': 'English (US)',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'الإنجليزية (الولايات المتحدة)',\n  'en_GB': 'الإنجليزية (بريطانيا)',\n  'de_DE': 'الألمانية',\n  'nl': 'الهولندية',\n  'fa': 'الفارسية',\n  'fr_FR': 'الفرنسية',\n  'it': 'الإيطالية',\n  'ca': 'الكتالونية',\n  'es': 'الإسبانية',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_GB': 'Обединеното Кралство',\n  'en_US': 'Съединените Щати',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'uk': 'ইউক্রেনীয়',\n  'ru': 'রাশিয়ান',\n  'pt_BR_no_diacritics': 'পর্তুগীজ (ব্রাজিল)',\n  'pl': 'পোলিশ',\n  'nl': 'ডাচ',\n  'it': 'ইতালীয়',\n  'hu': 'হাঙ্গেরিয়ান',\n  'fr_FR': 'ফরাসী',\n  'es': 'স্প্যানিশ',\n  'en_US': 'ইংরাজি (মার্কিন)',\n  'en_GB': 'ইংরাজি (ইউকে)',\n  'ja': 'জাপানি',\n  'fa': 'ফার্সি',\n  'de_DE': 'জার্মান',\n  'ca': 'কাতালান',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Anglès (Estats Units)',\n  'en_GB': 'Anglès (Regne Unit)',\n  'de_DE': 'Alemany (Ampliat)',\n  'nl': 'Neerlandès',\n  'fr_FR': 'Francès (Ampliat)',\n  'it': 'Italià',\n  'ca': 'Català',\n  'es': 'Castellà',\n  'fa': 'Persa',\n  'ja': 'Japonès',\n  'ru': 'Rus',\n  'hu': 'Hongarès',\n  'uk': 'Ucraïnès',\n  'pl': 'Polonès',\n  'pt_BR_no_diacritics': 'Portuguès (Brasil)',\n  'ru_extended': 'Rus (Ampliat)',\n  'pt_BR': 'Portuguès (Brasil) (Ampliat)',\n  'fr_FR_no_diacritics': 'Francès',\n  'de_DE_no_diacritics': 'Alemany',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Katalánština',\n  'de_DE': 'Němčina',\n  'es': 'Španělština',\n  'fa': 'Perština',\n  'fr_FR': 'Francouzština',\n  'hu': 'Maďarština',\n  'it': 'Italština',\n  'ja': 'Japonština',\n  'nl': 'Nizozemština',\n  'ru': 'Ruština',\n  'en_GB': 'Angličtina (UK)',\n  'en_US': 'Angličtina (US)',\n  'uk': 'Ukrajinština',\n  'pt_BR_no_diacritics': 'Portugalština (Brazílie)',\n  'pl': 'Polština',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Engelsk (USA)',\n  'uk': 'Ukrainsk',\n  'en_GB': 'Engelsk (Storbritannien)',\n  'ru': 'Russisk',\n  'pt_BR_no_diacritics': 'Portugisisk (Brasilien)',\n  'pl': 'Polsk',\n  'nl': 'Nederlandsk',\n  'ja': 'Japansk',\n  'it': 'Italiensk',\n  'hu': 'Ungarsk',\n  'fr_FR': 'Fransk',\n  'fa': 'Persisk',\n  'es': 'Spansk',\n  'de_DE': 'Tysk',\n  'ca': 'Katalansk',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_GB': 'Englisch (UK)',\n  'en_US': 'Englisch (US)',\n  'de_DE': 'Deutsch (erweitert)',\n  'nl': 'Niederländisch',\n  'fa': 'Persisch',\n  'fr_FR': 'Französisch (erweitert)',\n  'it': 'Italienisch',\n  'ca': 'Katalanisch',\n  'es': 'Spanisch',\n  'ja': 'Japanisch',\n  'ru': 'Russisch',\n  'hu': 'Ungarisch',\n  'uk': 'Ukrainisch',\n  'pl': 'Polnisch',\n  'pt_BR_no_diacritics': 'Portugiesisch (Brasilien)',\n  'ru_extended': 'Russisch (erweitert)',\n  'fr_FR_no_diacritics': 'Französisch',\n  'de_DE_no_diacritics': 'Deutsch',\n  'pt_BR': 'Portugiesisch (Brasilien) (erweitert)',\n  'es_solo_enne': 'Spanisch, nur Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Καταλανικά',\n  'ja': 'Ιαπωνικά',\n  'es': 'Ισπανικά',\n  'nl': 'Ολλανδικά',\n  'fa': 'Περσικά',\n  'hu': 'Ουγγρικά',\n  'en_US': 'Αγγλικά (ΗΠΑ)',\n  'ru': 'Ρωσικά',\n  'it': 'Ιταλικά',\n  'en_GB': 'Αγγλικά (ΗΒ)',\n  'de_DE': 'Γερμανικά (Εκτεταμένα)',\n  'fr_FR': 'Γαλλικά (εκτεταμένα)',\n  'uk': 'Ουκρανικά',\n  'ru_extended': 'Ρωσικά (Εκτεταμένα)',\n  'pt_BR_no_diacritics': 'Πορτογαλικά (Βραζιλία)',\n  'pl': 'Πολωνικά',\n  'fr_FR_no_diacritics': 'Γαλλικά',\n  'de_DE_no_diacritics': 'Γερμανικά',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'La angla (usona)',\n  'uk': 'La ukraina',\n  'en_GB': 'La angla (brita)',\n  'ru': 'La rusa',\n  'pl': 'La pola',\n  'ja': 'La japana',\n  'it': 'La itala',\n  'hu': 'La hungara',\n  'fr_FR': 'La franca (etendita)',\n  'es': 'La hispana',\n  'de_DE': 'La germana (etendita)',\n  'fa': 'La persa',\n  'pt_BR_no_diacritics': 'La portugala (brazila)',\n  'nl': 'La nederlanda',\n  'ca': 'La kataluna',\n  'ru_extended': 'La rusa (etendita)',\n  'fr_FR_no_diacritics': 'La franca',\n  'de_DE_no_diacritics': 'La germana',\n  'pt_BR': 'La portugala (brazila) (etendita)',\n  'es_solo_enne': 'La hispana kun nur Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Inglés (US)',\n  'en_GB': 'Inglés (GB)',\n  'uk': 'Ucraniano',\n  'ru': 'Ruso',\n  'pt_BR_no_diacritics': 'Portugués (BR)',\n  'pl': 'Polaco',\n  'nl': 'Holandés',\n  'ja': 'Japonés',\n  'it': 'Italiano',\n  'hu': 'Húngaro',\n  'fr_FR': 'Francés',\n  'fa': 'Persa',\n  'es': 'Español',\n  'es_solo_enne': 'Español sin acentos',\n  'de_DE': 'Alemán',\n  'ca': 'Catalán',\n  'fr_FR_no_diacritics': 'Francés',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'inglise (US)',\n  'uk': 'ukraina',\n  'en_GB': 'inglise (UK)',\n  'ru': 'vene',\n  'pt_BR_no_diacritics': 'portugali (Brasilia)',\n  'pl': 'poola',\n  'nl': 'hollandi',\n  'ja': 'jaapani',\n  'it': 'itaalia',\n  'hu': 'ungari',\n  'fr_FR': 'prantsuse (laiendatud)',\n  'fa': 'pärsia',\n  'es': 'hispaania',\n  'de_DE': 'saksa (laiendatud)',\n  'ca': 'katalaani',\n  'ru_extended': 'vene (laiendatud)',\n  'fr_FR_no_diacritics': 'prantsuse',\n  'de_DE_no_diacritics': 'saksa',\n  'pt_BR': 'portugali (Brasiilia) (laiendatud)',\n  'es_solo_enne': 'Hispaania keele puhul Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'انگلیسی آمریکایی',\n  'en_GB': 'انگلیسی بریتانیایی',\n  'uk': 'اوکراینی',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'katalaani',\n  'de_DE': 'saksa (laajennettu)',\n  'es': 'espanja',\n  'fa': 'persia',\n  'fr_FR': 'ranska (laajennettu)',\n  'hu': 'unkari',\n  'en_US': 'englanti (US)',\n  'uk': 'ukraina',\n  'en_GB': 'englanti (UK)',\n  'ru': 'venäjä',\n  'pl': 'puola',\n  'nl': 'hollanti',\n  'ja': 'japani',\n  'it': 'italia',\n  'pt_BR_no_diacritics': 'portugali (Brasilia)',\n  'ru_extended': 'venäjä (laajennettu)',\n  'fr_FR_no_diacritics': 'ranska',\n  'de_DE_no_diacritics': 'saksa',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Anglais (États-Unis)',\n  'en_GB': 'Anglais (Royaume-Uni)',\n  'de_DE': 'Allemand (étendu)',\n  'nl': 'Néerlandais',\n  'it': 'Italien',\n  'ca': 'Catalan',\n  'es': 'Espagnol',\n  'fa': 'Persan',\n  'fr_FR': 'Français (étendu)',\n  'ja': 'Japonais',\n  'ru': 'Russe',\n  'hu': 'Hongrois',\n  'uk': 'Ukrainien',\n  'pl': 'Polonais',\n  'pt_BR_no_diacritics': 'Portugais (Brésil)',\n  'ru_extended': 'Russe (étendu)',\n  'fr_FR_no_diacritics': 'Français',\n  'de_DE_no_diacritics': 'Allemand',\n  'pt_BR': 'Portugais (Brésil) (étendu)',\n  'es_solo_enne': 'Espagnol uniquement Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'אנגלית (ארה\\\"ב)',\n  'uk': 'אוקראינית',\n  'en_GB': 'אנגלית (בריטניה)',\n  'ru': 'רוסית',\n  'pt_BR_no_diacritics': 'פורטוגזית (ברזיל)',\n  'pl': 'פולנית',\n  'nl': 'הולנדית',\n  'ja': 'יפנית',\n  'it': 'איטלקית',\n  'hu': 'הונגרית',\n  'fr_FR': 'צרפתית',\n  'fa': 'פרסית',\n  'es': 'ספרדית',\n  'de_DE': 'גרמנית',\n  'ca': 'קטלאנית',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'अंग्रेज़ी (यू. एस.)',\n  'uk': 'यूक्रेनी',\n  'en_GB': 'अंग्रेजी (यूके)',\n  'ru': 'रूसी',\n  'pt_BR_no_diacritics': 'पुर्तगाली (ब्राज़ील)',\n  'pl': 'पोलिश',\n  'nl': 'डच',\n  'ja': 'जापानी',\n  'it': 'इटालियन',\n  'hu': 'हंगेरियन',\n  'fr_FR': 'फ्रेंच',\n  'fa': 'फ़ारसी',\n  'es': 'स्पैनिश',\n  'de_DE': 'जर्मन',\n  'ca': 'कातालान',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Katalonski',\n  'ja': 'Japanski',\n  'es': 'Španjolski',\n  'nl': 'Nizozemski',\n  'fa': 'Persijski',\n  'uk': 'Ukrajinski',\n  'hu': 'Mađarski',\n  'en_US': 'Engleski (SAD)',\n  'ru': 'Ruski',\n  'it': 'Talijanski',\n  'en_GB': 'Engleski (UK)',\n  'de_DE': 'Njemački (prošireno)',\n  'fr_FR': 'Francuski (prošireno)',\n  'pl': 'Poljski',\n  'pt_BR_no_diacritics': 'Portugalski (Brazil)',\n  'ru_extended': 'Ruski (prošireno)',\n  'fr_FR_no_diacritics': 'Francuski',\n  'de_DE_no_diacritics': 'Njemački',\n  'pt_BR': 'Portugalski (Brazil) (prošireno)',\n  'es_solo_enne': 'Španjolski samo Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Angol (US)',\n  'en_GB': 'Angol (UK)',\n  'de_DE': 'Német',\n  'nl': 'Holland',\n  'fa': 'Perzsa',\n  'fr_FR': 'Francia',\n  'it': 'Olasz',\n  'ca': 'Katalán',\n  'es': 'Spanyol',\n  'ja': 'Japán',\n  'ru': 'Orosz',\n  'hu': 'Magyar',\n  'uk': 'Ukrán',\n  'pt_BR_no_diacritics': 'Portugál (Brazília)',\n  'pl': 'Lengyel',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Inglese (Stati Uniti)',\n  'en_GB': 'Inglese (RU)',\n  'uk': 'Ucraino',\n  'ru': 'Russo',\n  'pl': 'Polacco',\n  'nl': 'Olandese',\n  'ja': 'Giapponese',\n  'it': 'Italiano',\n  'hu': 'Ungherese',\n  'fr_FR': 'Francese (esteso)',\n  'fa': 'Persiano',\n  'es': 'Spagnolo',\n  'de_DE': 'Tedesco (esteso)',\n  'ca': 'Catalano',\n  'pt_BR_no_diacritics': 'Portoghese (Brasile)',\n  'ru_extended': 'Russo (esteso)',\n  'fr_FR_no_diacritics': 'Francese',\n  'de_DE_no_diacritics': 'Tedesco',\n  'pt_BR': 'Portoghese (Brasile) (esteso)',\n  'es_solo_enne': 'Spagnolo, solo Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': '英語 (US)',\n  'en_GB': '英語 (UK)',\n  'de_DE': 'ドイツ語',\n  'nl': 'オランダ語',\n  'ca': 'カタルーニャ語',\n  'es': 'スペイン語',\n  'fa': 'ペルシア語',\n  'fr_FR': 'フランス語',\n  'hu': 'ハンガリー語',\n  'it': 'イタリア語',\n  'ja': '日本語',\n  'ru': 'ロシア語',\n  'uk': 'ウクライナ語',\n  'pl': 'ポーランド語',\n  'pt_BR_no_diacritics': 'ポルトガル語 (ブラジル)',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Îngilîzî (DYA)',\n  'uk': 'Ukraynî',\n  'en_GB': 'Îngilîzî (KY)',\n  'ru_extended': 'Rûsî (Berfireh)',\n  'ru': 'Rûsî',\n  'pt_BR_no_diacritics': 'Portûgalî (Brezîlya)',\n  'pt_BR': 'Portûgalî (Brezîlya) (Berfireh)',\n  'pl': 'Polonî',\n  'nl': 'Holendî',\n  'ja': 'Japonî',\n  'it': 'Îtalî',\n  'hu': 'Macarî',\n  'fr_FR_no_diacritics': 'Fransî',\n  'fr_FR': 'Fransî (Berfireh)',\n  'fa': 'Farsî',\n  'es': 'Spanyolî',\n  'de_DE_no_diacritics': 'Almanî',\n  'de_DE': 'Almanî (Berfireh)',\n  'ca': 'Katalanî',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Anglų (JAV)',\n  'uk': 'Ukrainiečių',\n  'en_GB': 'Anglų (JK)',\n  'ru_extended': 'Rusų (išplėstinis)',\n  'ru': 'Rusų',\n  'pt_BR_no_diacritics': 'Portugalų (Brazilijų)',\n  'pt_BR': 'Portugalų (Brazilų) (išplėstinis)',\n  'pl': 'Lenkų',\n  'nl': 'Olandų',\n  'ja': 'Japonų',\n  'it': 'Italų',\n  'hu': 'Vengrų',\n  'fr_FR_no_diacritics': 'Prancūzų',\n  'fr_FR': 'Prancūzų (išplėstinis)',\n  'fa': 'Persų',\n  'es': 'Ispanų',\n  'de_DE_no_diacritics': 'Vokiečių',\n  'de_DE': 'Vokiečių (išplėstinis)',\n  'ca': 'Katalonų',\n  'es_solo_enne': 'Ispanų tik su Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'इंग्रजी (यू. एस.)',\n  'uk': 'युक्रेनियन',\n  'en_GB': 'इंग्रजी (यू. के.)',\n  'ru': 'रशियन',\n  'pt_BR_no_diacritics': 'पोर्तुगीज (ब्राझील)',\n  'pl': 'पोलिश',\n  'nl': 'डच',\n  'ja': 'जपानी',\n  'it': 'इटालियन',\n  'hu': 'हंगेरियन',\n  'fr_FR': 'फ्रेंच',\n  'fa': 'फारसी',\n  'es': 'स्पॅनिश',\n  'de_DE': 'जर्मन',\n  'ca': 'कॅटलन',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Engelsk (USA)',\n  'en_GB': 'Engelsk (UK)',\n  'de_DE': 'Tysk (utvidet)',\n  'nl': 'Nederlandsk',\n  'fr_FR': 'Fransk (utvidet)',\n  'it': 'Italiensk',\n  'ca': 'Katalansk',\n  'es': 'Spansk',\n  'fa': 'Farsi',\n  'ja': 'Japansk',\n  'ru': 'Russisk',\n  'hu': 'Ungarsk',\n  'uk': 'Ukrainsk',\n  'pl': 'Polsk',\n  'pt_BR_no_diacritics': 'Portugisisk (Brasil)',\n  'ru_extended': 'Russisk (utvidet)',\n  'fr_FR_no_diacritics': 'Fransk',\n  'de_DE_no_diacritics': 'Tysk',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Engels (VS)',\n  'en_GB': 'Engels (VK)',\n  'de_DE': 'Duits (uitgebreid)',\n  'nl': 'Nederlands',\n  'fr_FR': 'Frans (uitgebreid)',\n  'it': 'Italiaans',\n  'ca': 'Catalaans',\n  'es': 'Spaans',\n  'fa': 'Perzisch',\n  'ja': 'Japans',\n  'ru': 'Russisch',\n  'hu': 'Hongaars',\n  'uk': 'Oekraïens',\n  'pl': 'Pools',\n  'pt_BR_no_diacritics': 'Portugees (Brazilië)',\n  'ru_extended': 'Russisch (uitgebreid)',\n  'fr_FR_no_diacritics': 'Frans',\n  'de_DE_no_diacritics': 'Duits',\n  'pt_BR': 'Portugees (Brazilië) (Uitgebreid)',\n  'es_solo_enne': 'Spaanse Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Kataloński',\n  'de_DE': 'Niemiecki',\n  'es': 'Hiszpański',\n  'fa': 'Perski',\n  'fr_FR': 'Francuski',\n  'hu': 'ęgierski',\n  'it': 'Włoski',\n  'ja': 'Japoński',\n  'nl': 'Holenderski',\n  'ru': 'Rosyjski',\n  'en_GB': 'Angielski (UK)',\n  'en_US': 'Angielski (USA)',\n  'uk': 'Ukraiński',\n  'pt_BR_no_diacritics': 'Portugalski (Brazylia)',\n  'pl': 'Polski',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ja': 'Japonês',\n  'pt_BR_no_diacritics': 'Português (Brasil)',\n  'pl': 'Polonês',\n  'en_US': 'Inglês (EUA)',\n  'uk': 'Ucraniano',\n  'en_GB': 'Inglês (RU)',\n  'ru': 'Russo',\n  'nl': 'Holandês',\n  'it': 'Italiano',\n  'hu': 'Húngaro',\n  'fr_FR': 'Francês',\n  'fa': 'Persa',\n  'es': 'Espanhol',\n  'de_DE': 'Alemão',\n  'ca': 'Catalão',\n  'fr_FR_no_diacritics': 'Francês',\n  'de_DE_no_diacritics': 'Alemão',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Catalão',\n  'ja': 'Japonês',\n  'es': 'Espanhol',\n  'nl': 'Holandês',\n  'fa': 'Persa',\n  'uk': 'Ucraniano',\n  'hu': 'Húngaro',\n  'en_US': 'Inglês (EUA)',\n  'ru': 'Russo',\n  'it': 'Italiano',\n  'en_GB': 'Inglês (Reino Unido)',\n  'de_DE': 'Alemão',\n  'fr_FR': 'Francês',\n  'pl': 'Polonês',\n  'pt_BR_no_diacritics': 'Português (Brasil)',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Catalão',\n  'de_DE': 'Alemão',\n  'es': 'Espanhol',\n  'fa': 'Persa',\n  'fr_FR': 'Francês',\n  'hu': 'Húngaro',\n  'it': 'Italiano',\n  'ja': 'Japonês',\n  'nl': 'Holandês',\n  'ru': 'Russo',\n  'en_GB': 'Inglês (RU)',\n  'uk': 'Ucraniano',\n  'en_US': 'Inglês (EUA)',\n  'pt_BR_no_diacritics': 'Português (Brasil)',\n  'pl': 'Polonês',\n  'fr_FR_no_diacritics': 'Francês',\n  'de_DE_no_diacritics': 'Alemão',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Английский (США)',\n  'en_GB': 'Английский (Великобритания)',\n  'de_DE': 'Немецкий (расширенный)',\n  'nl': 'Нидерландский',\n  'fa': 'Фарси',\n  'fr_FR': 'Французский (расширенный)',\n  'it': 'Итальянский',\n  'ca': 'Каталанский',\n  'es': 'Испанский',\n  'uk': 'Украинский',\n  'ru': 'Русский',\n  'pt_BR_no_diacritics': 'Португальский (Бразилия)',\n  'pl': 'Польский',\n  'ja': 'Японский',\n  'hu': 'Венгерский',\n  'ru_extended': 'Русский (расширенный)',\n  'pt_BR': 'Португальский (Бразилия) (расширенный)',\n  'fr_FR_no_diacritics': 'Французский',\n  'de_DE_no_diacritics': 'Немецкий',\n  'es_solo_enne': 'Только испанские Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'ᱤᱝᱨᱡᱤ (ᱭᱩᱮᱥ)',\n  'uk': 'ᱤᱝᱨᱡᱤ(ᱭᱩ. ᱠ)',\n  'ru': 'ᱨᱟᱹᱥᱥᱤᱭᱟᱹᱱ',\n  'pt_BR_no_diacritics': 'ᱯᱚᱨᱛᱩᱜᱤᱡ(ᱵᱨᱟᱡᱤᱞ)',\n  'pl': 'ᱯᱚᱞᱤᱥᱷ',\n  'nl': 'ᱰᱟᱹᱪ',\n  'ja': 'ᱡᱟᱯᱟᱱᱤᱡᱽ',\n  'it': 'ᱤᱴᱟᱞᱤᱭᱟᱱ',\n  'hu': 'ᱦᱟᱹᱝᱜᱟᱨᱤᱭᱟᱹᱱ',\n  'fr_FR': 'ᱯᱷᱨᱮᱸᱪ',\n  'fa': 'ᱯᱟᱹᱨᱥᱤᱭᱟᱹᱱ',\n  'es': 'ᱥᱯᱮᱱᱤᱥ',\n  'de_DE': 'ᱡᱟᱹᱨᱢᱟᱹᱱ',\n  'ca': 'ᱠᱟᱴᱟᱞᱟᱱ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Angličtina (US)',\n  'uk': 'Ukrajinčina',\n  'en_GB': 'Angličtina (UK)',\n  'ru': 'Ruština',\n  'pt_BR_no_diacritics': 'Portugalčina (Brazília)',\n  'pl': 'Poľština',\n  'nl': 'Holandčina',\n  'ja': 'Japončina',\n  'it': 'Taliančina',\n  'hu': 'Maďarčina',\n  'fr_FR': 'Francúzština',\n  'fa': 'Perzština',\n  'es': 'Španielčina',\n  'de_DE': 'Nemčina',\n  'ca': 'Katalánčina',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'ca': 'Katalanska',\n  'de_DE': 'Tyska',\n  'es': 'Spanska',\n  'fa': 'Persiska',\n  'fr_FR': 'Franska',\n  'hu': 'Ungerska',\n  'it': 'Italienska',\n  'ja': 'Japanska',\n  'nl': 'Holländska',\n  'ru': 'Ryska',\n  'en_GB': 'Engelska (UK)',\n  'uk': 'Ukrainska',\n  'en_US': 'Engelska (US)',\n  'pt_BR_no_diacritics': 'Portugisiska (Brasilien)',\n  'pl': 'Polska',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'สหรัฐอเมริกา',\n  'en_GB': 'สหราชอาณาจักร',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'İngilizce (US)',\n  'en_GB': 'İngilizce (UK)',\n  'de_DE': 'Almanca (Genişletilmiş)',\n  'nl': 'Flemenkçe',\n  'fa': 'Farsça',\n  'fr_FR': 'Fransızca (Genişletilmiş)',\n  'it': 'İtalyanca',\n  'ca': 'Katalanca',\n  'es': 'İspanyolca',\n  'ja': 'Japonca',\n  'ru': 'Rusça',\n  'hu': 'Macarca',\n  'uk': 'Ukraynaca',\n  'pl': 'Lehçe',\n  'pt_BR_no_diacritics': 'Portekizce (Brezilya)',\n  'ru_extended': 'Rusça (Genişletilmiş)',\n  'fr_FR_no_diacritics': 'Fransızca',\n  'de_DE_no_diacritics': 'Almanca',\n  'pt_BR': 'Portekizce (Brezilya) (Genişletilmiş)',\n  'es_solo_enne': 'Yalnızca İspanyolca Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Англійська (США)',\n  'en_GB': 'Англійська (Великобританія)',\n  'de_DE': 'Німецька (розширена)',\n  'nl': 'Нідерландська',\n  'fa': 'Перська',\n  'fr_FR': 'Французька (розширена)',\n  'it': 'Італійська',\n  'ca': 'Каталонська',\n  'es': 'Іспанська',\n  'ja': 'Японська',\n  'ru': 'Російська',\n  'hu': 'Угорська',\n  'uk': 'Українська',\n  'pt_BR_no_diacritics': 'Португальська (Бразилія)',\n  'pl': 'Польська',\n  'ru_extended': 'Російська (розширена)',\n  'fr_FR_no_diacritics': 'Французька',\n  'de_DE_no_diacritics': 'Німецька',\n  'pt_BR': 'Португальська (Бразилія) (розширена)',\n  'es_solo_enne': 'Лише іспанська Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': 'Tiếng Anh (US)',\n  'uk': 'Tiếng Ukraina',\n  'en_GB': 'Tiếng Anh (UK)',\n  'ru_extended': 'Tiếng Nga (Mở rộng)',\n  'ru': 'Tiếng Nga',\n  'pt_BR': 'Tiếng Bồ Đào Nha (Brazil) (Mở rộng)',\n  'pl': 'Tiếng Ba Lan',\n  'nl': 'Tiếng Hà Lan',\n  'ja': 'Tiếng Nhật',\n  'it': 'Tiếng Italy',\n  'hu': 'Tiếng Hungary',\n  'fr_FR_no_diacritics': 'Tiếng Pháp',\n  'fr_FR': 'Tiếng Pháp (Mở rộng)',\n  'fa': 'Tiếng Persia',\n  'es': 'Tiếng Tây Ban Nha',\n  'de_DE_no_diacritics': 'Tiếng Đức',\n  'de_DE': 'Tiếng Đức (Mở rộng)',\n  'ca': 'Tiếng Catalan',\n  'pt_BR_no_diacritics': 'Tiếng Bồ Đào Nha (Brazil)',\n  'es_solo_enne': 'Tiếng Tây Ban Nha chỉ Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': '美式英语',\n  'en_GB': '英式英语',\n  'de_DE': '德语 (扩展)',\n  'nl': '荷兰语',\n  'fa': '波斯语',\n  'fr_FR': '法语 (扩展)',\n  'it': '意大利语',\n  'ca': '加泰罗尼亚语',\n  'es': '西班牙语',\n  'ja': '日语',\n  'ru': '俄语',\n  'uk': '乌克兰语',\n  'pl': '波兰语',\n  'hu': '匈牙利语',\n  'pt_BR_no_diacritics': '葡萄牙语(巴西)',\n  'ru_extended': '俄语 (扩展)',\n  'fr_FR_no_diacritics': '法语',\n  'de_DE_no_diacritics': '德语',\n  'pt_BR': '葡萄牙语 (巴西) (扩展)',\n  'es_solo_enne': '仅西班牙语 Ñ',\n}\n","/* eslint-disable */\nexport const languageTitles = {\n  'en_US': '美式英文',\n  'en_GB': '英式英文',\n  'de_DE': '德文',\n  'nl': '荷蘭文',\n  'fa': '波斯文',\n  'fr_FR': '法文',\n  'it': '義大利文',\n  'ca': '加泰隆尼亞文',\n  'es': '西班牙文',\n  'ja': '日文',\n  'ru': '俄文',\n  'hu': '匈牙利文',\n}\n","import * as R from 'ramda'\nimport { createContext, useEffect, useMemo, useState } from 'react'\nimport { logger } from '../util/logger'\nimport { storage } from '../util/storage'\nimport {\n  ImplementedLanguage,\n  languageCodeToTranslationsMap,\n  GeneralTranslation,\n  defaultTranslation,\n  Translation\n} from './implemented-languages'\n\nexport enum LocalStorage {\n  LanguageCode = 'translation'\n}\n\nconst addTranslationDefaults = <\n  T extends GeneralTranslation\n>(preferred: GeneralTranslation, defaults: T) => {\n  const keys: (keyof T)[] = R.uniq([...Object.keys(defaults), ...Object.keys(preferred)]) as any[]\n  return R.reduce(\n    (acc: T, key: keyof T) => {\n      const preferredKey = key as keyof GeneralTranslation\n      return {\n        ...acc,\n        [key]: {\n          ...(defaults[key] ? defaults[key] : {}),\n          ...(preferred[preferredKey] ? preferred[preferredKey] : {})\n        }\n      }\n    },\n    {} as T,\n    keys\n  )\n}\n\nconst translationsWithDefaults = (lang: ImplementedLanguage) => {\n  const parentLang = lang.match(/(?<parentLang>.*)-/)?.groups?.parentLang\n  const preferredTranslations = languageCodeToTranslationsMap[lang]\n\n  if (parentLang && isImplemented(parentLang)) {\n    const parentTranslation = languageCodeToTranslationsMap[parentLang]\n    const withParentLangDefaults = addTranslationDefaults(preferredTranslations, parentTranslation)\n    return addTranslationDefaults(withParentLangDefaults, defaultTranslation)\n  }\n\n  return addTranslationDefaults(preferredTranslations, defaultTranslation)\n}\n\nconst isImplemented = (lang: string): lang is ImplementedLanguage => {\n  for (const validLang in ImplementedLanguage) {\n    if (lang === ImplementedLanguage[validLang as any as keyof typeof ImplementedLanguage]) {\n      return true\n    }\n  }\n  return false\n}\n\nconst getClosestLanguageIfPossible = (languageCode: string) => {\n  const [language, region] = languageCode.split('-')\n\n  const bestFit = `${language}-r${region}`\n\n  if (isImplemented(bestFit)) return bestFit\n\n  if (isImplemented(language)) return language\n  \n  return ImplementedLanguage.English\n}\n\nconst getBestTranslation = () => {\n  const preset = storage.get({ key: LocalStorage.LanguageCode, parser: R.identity })\n  if (preset && isImplemented(preset)) return preset\n  return getClosestLanguageIfPossible(navigator.language)\n}\n\nexport const useTranslations = () => {\n  const [baseLanguage, setBaseLanguage] = useState(getBestTranslation())\n\n  const language = isImplemented(baseLanguage) ? baseLanguage : ImplementedLanguage.English\n\n  const translation = useMemo(() => translationsWithDefaults(language), [language])\n\n\n  useEffect(() => {\n    logger.debug('running translations useEffect...')\n    const handleStorageUpdate = (event: StorageEvent) => {\n      if (event.key === LocalStorage.LanguageCode) setBaseLanguage(getBestTranslation())\n    }\n\n    window.addEventListener('storage', handleStorageUpdate)\n\n    return () => window.removeEventListener('storage', handleStorageUpdate)\n  }, [setBaseLanguage])\n\n  return translation\n}\n\nexport type TranslationsContext = Translation\n\nexport const Translations = createContext<TranslationsContext>(defaultTranslation)\n","import { toSeconds } from 'duration-fns'\nimport { useContext, useEffect, useMemo, useReducer, useState } from 'react'\nimport { LetterScores, LetterScoresContext, scoreWord } from '.'\nimport { logger } from '../util/logger'\nimport { storage, useStorage } from '../util/storage'\nimport { Rules, RulesContext, Ruleset, Rulesets, useRulesets } from './rules'\nimport { Score, ScoreContext } from './score'\n\nexport enum LocalStorage {\n  HighScores = 'high-scores'\n}\n\nexport type HighScores = { [key: string]: number }\n\nexport const getHighScores = () => storage.getWithDefault<HighScores>({ key: LocalStorage.HighScores, defaultValue: {} })\n\n\nexport const getHighScore = (id: string) => {\n  const scores = getHighScores()\n  if (scores[id]) return scores[id]\n\n  return 0\n}\n\nexport const setHighScore = (id: string, score: number) => {\n  const scores = getHighScores()\n  storage.set(LocalStorage.HighScores, { ...scores, [id]: score })\n}\n\nconst rulesetsAreEquivalent = (a: Ruleset, b: Ruleset) => {\n  return a.boardWidth === b.boardWidth\n    && a.minimumWordLength === b.minimumWordLength\n    && a.score === b.score\n    && toSeconds(a.time) === toSeconds(b.time)\n    && a.timeAttack === b.timeAttack\n}\n\nconst findRulesetId = (rulesets: Rulesets, rules: Ruleset) => {\n  const keys = Object.keys(rulesets)\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const toCompare = rulesets[key]\n    logger.debug('comparing rulesets', { toCompare, compareAgainst: rules })\n    if (rulesetsAreEquivalent(toCompare, rules)) return key\n  }\n}\n\nconst useMemoizedComputedScore = (score: ScoreContext, rules: RulesContext, letterScores: LetterScoresContext) => {\n  const [scoredWords, setScoredWords] = useState(0)\n  const [computedScore, dispatchComputedScore] = useReducer((state: number, action: number) => state + action, 0)\n\n  useEffect(() => {\n    if (scoredWords === score.foundWords.length) return\n    let additionalScore = 0\n    for (let i = scoredWords; i < score.foundWords.length; i++) {\n      additionalScore += scoreWord(score.foundWords[i], rules.score, letterScores)\n    }\n\n    dispatchComputedScore(additionalScore)\n    setScoredWords(score.foundWords.length)\n  }, [scoredWords, setScoredWords, dispatchComputedScore, score, letterScores, rules])\n\n  return computedScore\n}\n\nexport const useHighScore = (id: string) => {\n  const highScores = useStorage(LocalStorage.HighScores, {} as HighScores)\n  if (highScores[id] !== undefined) return highScores[id]\n\n  return 0\n}\n\nexport const useUpdateHighScore = () => {\n  const rules = useContext(Rules)\n  const score = useContext(Score)\n  const rulesets = useRulesets()\n  const letterScores = useContext(LetterScores)\n\n  const currentId = useMemo(() => findRulesetId(rulesets, rules), [rulesets, rules])\n\n  const computedScore = useMemoizedComputedScore(score, rules, letterScores)\n\n  useEffect(() => {\n    logger.debug('running useUpdateHighScore useEffect...')\n    if (!currentId) {\n      logger.debug('no ruleset id... early exit')\n      return\n    }\n    const lastHighScore = getHighScore(currentId)\n    if (lastHighScore < computedScore)\n      setHighScore(currentId, computedScore)\n  }, [computedScore, currentId])\n\n  return currentId ? getHighScore(currentId) : 0\n}\n","import * as R from \"ramda\"\nimport { useEffect, useState } from \"react\"\nimport { ElementIdentifier, useElementSize } from \"./hooks\"\nimport { logger } from \"./logger\"\n\nconst toCamelCaseReplaceFn = (_: string, wordSoFar: string, toCapitalize: string): string => {\n  return `${wordSoFar}${toCapitalize.toUpperCase()}`\n}\n\nexport const toCamelCase = (property: string) => property.replace(/(?:--)?(\\w+)-(\\w)/ig, toCamelCaseReplaceFn)\n\nconst getHeight = (id: string) => {\n  try {\n    const rawHeight = getComputedStyle(document.getElementById(id) as HTMLElement).height\n    const height = parseFloat(rawHeight)\n\n    return height\n  } catch {\n    return 0\n  }\n}\n\n// eslint-disable-next-line\nconst em = (value: number) => {\n  const emPerPixel = getHeight('em-cheat')\n  return value * emPerPixel\n}\n\nconst vh = (value: number) => {\n  const vhPerPixel = getHeight('viewport-height-cheat')\n  return value * vhPerPixel\n}\n\n// eslint-disable-next-line\nconst vw = (value: number) => {\n  const vwPerPixel = getHeight('viewport-width-cheat')\n  return value * vwPerPixel\n}\n\nconst px = (value: number) => value\n\nconst unitMap = { em, vh, vw, px, '': (num: number) => num } as const\n\ntype Unit = keyof typeof unitMap\n\nconst clamp = (min: number, target: number, max: number) => {\n  const clampMin = Math.max(target, min)\n  const clampMax = Math.min(clampMin, max)\n  return clampMax\n}\n\nconst min = (a: number, b: number) => Math.min(a, b)\n\nconst max = (a: number, b: number) => Math.max(a, b)\n\nconst cssFunctionMap = {\n  clamp,\n  max,\n  min\n} as const\n\ntype ValidNames = keyof typeof cssFunctionMap\n\nconst isValidFunctionName = (fnName: string): fnName is ValidNames => (Object.keys(cssFunctionMap) as any as ValidNames).includes(fnName)\n\nconst getCssFunctionName = (expression: string): keyof typeof cssFunctionMap => {\n  const firstParenIndex = expression.indexOf('(')\n  if (firstParenIndex === -1) throw new Error(`${expression} has no function call`)\n  const untrimmedFnName = expression.substring(0, firstParenIndex)\n  const fnName = untrimmedFnName.trim()\n  if (isValidFunctionName(fnName)) return fnName\n\n  throw new Error(`${fnName} is not a supported css function name, expression: ${expression}`)\n}\n\nconst getParenCounts = (expression: string) => {\n  let left = 0, right = 0\n  expression.split('').forEach(char => {\n    if (char === '(') left++\n    if (char === ')') right++\n  })\n\n  return { left, right }\n}\n\nconst stitchParensReducer = (acc: string[], value: string, index: number, arr: string[]) => {\n  const { left, right } = getParenCounts(value)\n  if (left > right) return [...acc, `${value}, ${arr[index + 1]}`]\n  if (right > left) return acc\n  return [...acc, value]\n}\n\nconst isCssFunction = (arg: string) => {\n  return arg.indexOf('(') !== -1\n}\n\nconst isValidUint = (arg: string): arg is keyof typeof unitMap => unitMap.hasOwnProperty(arg)\n\nconst getUnit = (arg: string): Unit => {\n  const result = /([a-z%]+)/.exec(arg)\n  const unit = result && result.length ? result[0] : ''\n\n  if (!isValidUint(unit)) throw new Error(`${unit} is not a supported/valid css unit. argument: ${arg}`)\n\n  return unit\n}\n\nconst factor = (ops: string[]): [number, string[]] => {\n  const arg = ops.shift()\n  if (!arg?.length) return [0, []]\n\n  const number = arg.replace(/([\\d.]*)/, '$1')\n  const unit = getUnit(arg)\n  const parsedNumber = parseFloat(number)\n\n  if (!unit.length) return [parsedNumber, ops]\n\n  return [unitMap[unit](parsedNumber), ops]\n}\n\nconst isTerm = (op: string) => ['*', '/'].includes(op)\n\nconst term = (ops: string[]): [number, string[]] => {\n  let [result, remainingOps] = factor(ops)\n  while (remainingOps.length && isTerm(remainingOps[0])) {\n    const operation = remainingOps.shift()\n    const [factorResult, unusedOps] = factor(ops)\n    remainingOps = unusedOps\n    if (operation === '*') {\n      result *= factorResult\n    } else {\n      result /= factorResult\n    }\n  }\n\n  return [result, remainingOps]\n}\n\nconst isExpression = (op: string) => ['+', '-'].includes(op)\n\nconst expression = (ops: string[]): [number, string[]] => {\n  let [result, remainingOps] = factor(ops)\n  while (remainingOps.length && isExpression(remainingOps[0])) {\n    const op = remainingOps.shift()\n    const [termResult, unusedOps] = term(remainingOps)\n    remainingOps = unusedOps\n    result = result + (op === '+' ? termResult : -termResult)\n  }\n  return [result, remainingOps]\n}\n\nconst evaluateStatement = (arg: string): number => {\n  if (isCssFunction(arg)) return evaluateFunction(arg)\n\n  const ops = arg\n    .replace(/([\\d\\w.]+)/g, ' $1 ')\n    .split(' ')\n    .filter(({ length }) => length)\n    .map(op => op.trim())\n\n  const [result] = expression(ops)\n\n  return result\n}\n\nconst evaluateFunction = (expression: string): number => {\n  const fnName = getCssFunctionName(expression)\n  const rest = expression.replace(fnName, '').trim()\n  const args = rest\n    .replace(/\\((.*)\\);?$/, '$1')\n    .split(',')\n    .map(w => w.trim())\n    .filter(w => w.length > 0)\n    .reduce<string[]>(stitchParensReducer, [] as string[])\n    .map(w => w.trim())\n\n  try {\n    const values = args.map(evaluateStatement)\n\n    if (fnName === 'clamp' && values.length !== 3) throw new Error(`${values} is not the right number of arguments for ${fnName}, ${expression}`)\n    if (fnName === 'max' && values.length !== 2) throw new Error(`${values} is not the right number of arguments for ${fnName}, ${expression}`)\n    if (fnName === 'min' && values.length !== 2) throw new Error(`${values} is not the right number of arguments for ${fnName}, ${expression}`)\n\n    return cssFunctionMap[fnName](...(values as [any, any, any]))\n\n  } catch (err: any) {\n    throw new Error(`${err.message}, parent expression: ${expression}`)\n  }\n}\n\nconst argToString = (arg: any, expression: string) => {\n  const keys = Object.keys(unitMap).filter(({ length }) => length)\n\n\n  const isUnit = RegExp(`^(${keys.join('|')})\\\\s`)\n  if (R.isNil(arg)) return isUnit.test(expression) ? '0' : ''\n\n  return arg.toString()\n}\n\nconst makeExpression = (strings: TemplateStringsArray, ...args: any[]) => {\n  let expression = ''\n  for (let i = args.length; i > 0; i--) {\n    expression = `${strings[i]}${expression}`\n    const arg = args[i - 1]\n    const argString = argToString(arg, strings[i])\n    expression = `${argString}${expression}`\n  }\n  return `${strings[0]}${expression}`\n}\n\nexport const cssExp = (strings: TemplateStringsArray, ...args: any[]) => {\n  const expression = makeExpression(strings, ...args)\n  if (isCssFunction(expression)) return evaluateFunction(expression)\n  return evaluateStatement(expression)\n}\n\nexport const useCssExp = (expression: TemplateStringsArray, ...args: any[]) => {\n  const [result, setResult] = useState(cssExp(expression, ...args))\n\n  const { size: { width, height } } = useElementSize(ElementIdentifier.Type, 'body')\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _ = [width, height]\n\n    logger.debug('running useCssExp useEffect...')\n\n    setResult(cssExp(expression, ...args))\n  }, [width, height, setResult, expression, args])\n\n  return result\n}\n\nexport const __test = {\n  makeExpression,\n  evaluateStatement,\n  getHeight\n}\n","import { useEffect, useCallback, useState } from 'react'\n\nimport { cssExp } from '../util/css-parse'\n\nconst getConstants = () => ({\n  fontSize: cssExp`clamp(1em, min(2.5vh, 4vw), 2em)`,\n  fontSizeTitle: cssExp`clamp(1.5em, min(3vh, 5.25vw), 3em)`,\n  fontSizeSubscript: cssExp`clamp(0.5em, min(2vh, 2.75vw), 1em)`,\n  fontWeightBold: 700,\n  fontWeightLight: 100,\n\n  colorContentDark: '#93a1a1',\n  colorContentLight: '#586e75',\n\n  colorContentLowContrastDark: '#657b83',\n  colorContentLowContrastLight: '#839496',\n\n  colorBackgroundDark: '#002b36',\n  colorBackgroundLight: '#eee8d5',\n\n  colorBackgroundDarkAlt: '#073642',\n  colorBackgroundLightAlt: '#fdf6e3',\n\n  colorAccent: '#268bd2',\n  colorGreen: '#2aa198',\n  colorRed: '#dc322f',\n  colorYellow: '#b58900'\n})\n\nconst useUnits = () => {\n  const [ready, setReady] = useState(false)\n  useEffect(() => {\n    if (document.getElementById('viewport-height-cheat')) {\n      setReady(true)\n    }\n  }, [setReady])\n  return ready\n}\n\nexport const useConstants = () => {\n  const [constants, updateConstants] = useState(getConstants())\n  const updateState = useCallback(() => updateConstants(getConstants()), [])\n\n  const ready = useUnits()\n\n  useEffect(() => {\n    if (ready) updateConstants(getConstants())\n  }, [updateConstants, ready])\n\n  useEffect(() => {\n    const eventListener = () => {\n      updateState()\n    }\n    window.addEventListener('resize', eventListener)\n    return () => window.removeEventListener('resize', eventListener)\n  }, [updateState])\n\n  return constants\n}\n\n\nconst constants = {\n  fontSize: 'clamp(1em, min(2.5vh, 4vw), 2em)',\n  fontSizeTitle: 'clamp(1.5em, min(3vh, 5.25vw), 3em)',\n  fontSizeSubscript: 'clamp(0.5em, min(2vh, 2.75vw), 1em)',\n  fontWeightBold: 'bolder',\n  fontWeightLight: 'lighter',\n\n  colorContentDark: '#93a1a1',\n  colorContentLight: '#586e75',\n\n  colorContentLowContrastDark: '#657b83',\n  colorContentLowContrastLight: '#839496',\n\n  colorBackgroundDark: '#002b36',\n  colorBackgroundLight: '#eee8d5',\n\n  colorBackgroundDarkAlt: '#073642',\n  colorBackgroundLightAlt: '#fdf6e3',\n\n  colorAccent: '#268bd2',\n  colorGreen: '#2aa198',\n  colorRed: '#dc322f',\n  colorYellow: '#b58900'\n}\n\nexport default constants\n","import constants, { useConstants } from \"../style/constants\"\n\nexport type SvgComponent = React.FunctionComponent<React.SVGProps<SVGSVGElement> & { title?: string }>\n\nexport type SvgProps = {\n  title: string,\n  width: number,\n  height: number,\n  fill: string\n}\n\nexport type CustomizableProps = {\n  svg: SvgComponent,\n  props: {\n    title: string,\n    width?: number,\n    height?: number,\n    fill?: string\n  }\n}\n\nconst Customizable = ({ svg, props }: CustomizableProps): JSX.Element => {\n  // The typescript types are wrong for this component.\n  // the svgs imported by webpack are not (at least in development) functional components\n  // but rather of type react.forward_ref\n  const render: (props: SvgProps) => JSX.Element = (svg as  any).render || svg\n  const { fontSize } = useConstants()\n  const defaults: Omit<SvgProps, 'title'> = {\n    width: fontSize,\n    height: fontSize,\n    fill: constants.colorContentDark\n  }\n\n  const withOverrides = { ...defaults, ...props}\n  return <>{render(withOverrides)}</>\n}\n\nexport type StandardProps = {\n  svg: SvgComponent,\n  title: string\n}\n\nconst Standard = ({ svg, title }: StandardProps) => <Customizable svg={svg} props={{ title }}/>\n\nconst Svg = {\n  Customizable,\n  Standard\n}\n\nexport default Svg\n","import { ReactComponent as Timer } from '@material-design-icons/svg/round/timer.svg'\nimport { ReactComponent as GridView } from '@material-design-icons/svg/round/grid_view.svg'\nimport { ReactComponent as DirectionsRun } from '@material-design-icons/svg/round/directions_run.svg'\nimport { ReactComponent as EmojiEvents } from '@material-design-icons/svg/round/emoji_events.svg'\nimport { ReactComponent as Sort } from '@material-design-icons/svg/round/sort.svg'\nimport { Duration, normalize } from 'duration-fns'\n\nimport Svg, { SvgComponent } from './Svg'\nimport { useContext } from 'react'\nimport { Rules, Ruleset } from '../game/rules'\n\nimport './GameModeDetails.css'\n\nconst getScoringType = (scoringType: string): string => ({\n  'l': 'Letter Points',\n  'w': 'Word Length'\n}[scoringType] as any)\n\nconst getReadableTime = (time: Duration) => {\n  const { minutes = 0 } = normalize(time)\n  if (minutes === 1) return '1 min'\n  return `${minutes} mins`\n}\n\nexport type GameModeDetailsProps = {\n  size?: number\n  color?: string,\n  ruleset?: Ruleset\n}\n\nconst getOverrideObject = (size?: number, color?: string) => {\n  if (size === undefined && color === undefined) return {}\n  return size === undefined\n    ? { fill: color }\n    : color === undefined\n    ? { width: size, height: size }\n    : { width: size, height: size, fill: color }\n}\n\nconst GameModeDetails = ({\n  size,\n  color,\n  ruleset: rulesetOverride\n}: GameModeDetailsProps): JSX.Element => {\n  const defaultRules = useContext(Rules)\n  const rules = rulesetOverride || defaultRules\n\n  const timeAttack = rules.timeAttack !== undefined ? rules.timeAttack : 0\n\n  const overrides = getOverrideObject(size, color)\n\n  const getOverrides = (title: string) => ({ ...overrides, title })\n\n  const getSvg = (svg: SvgComponent, title: string) => <Svg.Customizable svg={svg} props={getOverrides(title)}/>\n\n  return <div style={size !== undefined ? { fontSize: size } : {}} className=\"game-mode-details-container\">\n      <div className=\"game-mode-details-info\">\n        {getSvg(Timer, 'Time')}\n        <div>{getReadableTime(rules.time)}</div>\n      </div>\n      <div className=\"game-mode-details-info\">\n        {getSvg(GridView, 'Grid-Size')}\n        <div>{rules.boardWidth}x{rules.boardWidth}</div>\n      </div>\n      <div className=\"game-mode-details-info\">\n        {getSvg(EmojiEvents, 'scoring')}\n        <div>{getScoringType(rules.score)}</div>\n      </div>\n      <div className=\"game-mode-details-info\">\n        {getSvg(Sort, 'Minimum Word Length')}\n        <div>&ge; {rules.minimumWordLength}</div>\n      </div>\n      {timeAttack > 0\n        ? <div className=\"game-mode-details-info\">\n          {getSvg(DirectionsRun, 'Time Attack')}\n          <div>x{timeAttack}</div>\n        </div>\n        : ''\n      }\n    </div>\n}\n\nexport default GameModeDetails\n","import * as R from 'ramda'\n\nexport type ConditionalClass = {\n  name: string,\n  condition: boolean\n}\n\nexport type TrueAndFalseCaseClass = {\n  condition: boolean,\n  true: string,\n  false: string\n}\n\nconst isTrueAndFalseCaseClass = (cssClass: ConditionalClass | TrueAndFalseCaseClass): cssClass is TrueAndFalseCaseClass => cssClass.hasOwnProperty('true')\n\nconst getClass = (cssClass: string | undefined | ConditionalClass | TrueAndFalseCaseClass): string | undefined => {\n  if (!cssClass) return cssClass\n  if (typeof cssClass === 'string') return cssClass\n\n  if (isTrueAndFalseCaseClass(cssClass)) {\n    const { condition, true: trueCase, false: falseCase } = cssClass as TrueAndFalseCaseClass\n    return condition ? trueCase : falseCase\n  }\n\n  return cssClass.condition ? cssClass.name : ''\n}\n\nexport const makeClasses = (...classes: (string | undefined | ConditionalClass | TrueAndFalseCaseClass)[]): string => R.reduce(\n  (acc: string, cssClass: typeof classes[number]) => cssClass ? `${acc} ${getClass(cssClass)}` : acc,\n  '',\n  classes\n).trim()\n","import { createContext, useMemo, useState, useEffect, useContext } from 'react'\nimport { ReactComponent as ArrowBack } from '@material-design-icons/svg/round/arrow_back.svg'\n\nimport Svg from './Svg'\n\nimport './Banner.css'\nimport { useHistory, useLocation } from 'react-router'\nimport { useCallback } from 'react'\nimport { ElementIdentifier, useElementSize, useScreenSize } from '../util/hooks'\nimport { logger } from '../util/logger'\nimport { useCssExp } from '../util/css-parse'\nimport { useConstants } from '../style/constants'\n\nconst getPageName = (path: string): string => {\n  const segment = path.split('/').filter(s => s.length).pop()\n  if (!segment) return ''\n\n  return segment.replace(/-/g, ' ')\n}\n\nexport type RenderInBannerContext = {\n  cleanUp: () => void,\n  setElement: (toRender: Renderable) => void\n}\n\nexport type Renderable = (size: { maxHeight: number, maxWidth: number }) => JSX.Element\n\nexport type RenderState = {\n  toRender: Renderable\n}\n\n\n\nexport const useBannerContext = (): { renderState: RenderState, context: RenderInBannerContext } => {\n  const [renderState, setState] = useState<RenderState>({\n    toRender: () => <></>\n  })\n\n  const cleanUp = useCallback(() => setState({ toRender: () => <></> }), [setState])\n\n  const setElement = useCallback((toRender: Renderable) => setState({ toRender }), [setState])\n\n  const context = useMemo(() => ({ cleanUp, setElement }), [cleanUp, setElement])\n\n  return useMemo(() => ({ renderState, context }), [renderState, context])\n}\n\nexport const useRenderInBanner = (renderable: Renderable) => {\n  const { setElement, cleanUp } = useContext(RenderInBanner)\n\n  useEffect(() => {\n    setElement(renderable)\n    return cleanUp\n  }, [setElement, cleanUp, renderable])\n}\n\nexport const RenderInBanner = createContext<RenderInBannerContext>({\n  setElement: (_: any) => {},\n  cleanUp: () => {}\n})\n\nconst Banner = ({ toRender: RenderProp }: { toRender: Renderable }): JSX.Element => {\n  const history = useHistory()\n  const { pathname } = useLocation()\n\n  const pageName = getPageName(pathname)\n\n  const onClickHandler = useCallback(() => {\n    history.goBack()\n  }, [history])\n\n  const { location: { right: leftBound } } = useElementSize(ElementIdentifier.Class, 'banner-page-title')\n\n  const { width } = useScreenSize()\n\n  const { fontSizeTitle } = useConstants()\n  const maxHeight = fontSizeTitle\n\n  const maxWidth = width - leftBound - useCssExp`0.5vh`\n\n  useEffect(() => {\n    logger.debug({ maxHeight, maxWidth })\n  }, [maxWidth, maxHeight])\n\n  return <div className=\"banner\">\n    <div\n      className=\"banner-button-area\"\n      onClick={onClickHandler}\n    >\n      <Svg.Standard svg={ArrowBack} title=\"Return home\"/>\n    </div>\n    <div className=\"banner-page-title\">\n      {pageName}\n    </div>\n    <div className=\"banner-rendered-prop\">\n      <RenderProp maxHeight={maxHeight} maxWidth={maxWidth}/>\n    </div>\n  </div>\n}\n\nexport default Banner\n","import { ReactComponent as Add } from '@material-design-icons/svg/round/add.svg'\n\nimport { Ruleset, Rulesets, setCurrentRuleset, useRulesets, useRulesFromStorage } from '../game/rules'\nimport GameModeDetails from '../components/GameModeDetails'\nimport Svg from \"../components/Svg\"\nimport constants, { useConstants } from \"../style/constants\"\nimport { makeClasses } from '../util/classes'\n\nimport './GameModes.css'\nimport { Renderable, useRenderInBanner } from '../components/Banner'\nimport { Link, useHistory } from 'react-router-dom'\nimport { logger } from '../util/logger'\nimport { useCallback } from 'react'\n\ntype ModeProps = {\n  rulesetTuple: [string, Ruleset]\n  handleOnClick: (id: string) =>  void,\n  isSelected: boolean\n}\n\nconst Mode = ({\n  rulesetTuple,\n  handleOnClick,\n  isSelected\n}: ModeProps): JSX.Element => {\n\n  const [id, ruleset] = rulesetTuple\n\n  const { fontSizeSubscript } = useConstants()\n\n  const classNames = makeClasses(\n    'game-modes-ruleset',\n    { condition: isSelected, name: 'game-modes-ruleset-selected' }\n  )\n\n  return <div\n    className={classNames}\n    onClick={() => handleOnClick(id)}\n  >\n    <div className=\"game-mode-ruleset-name\">\n      {ruleset.name}\n    </div>\n    {isSelected ? <GameModeDetails\n      ruleset={rulesetTuple[1]}\n      size={fontSizeSubscript}\n      color={constants.colorContentDark}\n      /> : ''}\n  </div>\n}\n\ntype ModesListProps = {\n  rulesets: Rulesets,\n  selectedRulesetId: string\n  handleOnClick: (id: string) => void\n}\n\nconst ModesList = ({\n  rulesets: rulesetsObject,\n  selectedRulesetId,\n  handleOnClick\n}: ModesListProps): JSX.Element => {\n  const rulesets = Object.entries(rulesetsObject)\n\n  logger.debug(rulesets)\n\n  const getMode = (ruleset: typeof rulesets[number]) => <Mode\n    rulesetTuple={ruleset}\n    isSelected={ruleset[0] === selectedRulesetId}\n    key={ruleset[0]}\n    handleOnClick={handleOnClick}\n  />\n\n  return <div className=\"game-modes-ruleset-list\">\n    {rulesets.map(getMode)}\n  </div>\n}\n\nconst shouldAddPrompt = (height: number, width: number) => {\n  return width / height > 6.75\n}\n\nconst AddGameMode: Renderable = ({ maxHeight, maxWidth }) => <Link\n  className={makeClasses(\n    'game-modes-add-game-mode-button',\n    'banner-rendered-prop-container'\n  )}\n  style={{\n    height: maxHeight,\n    maxHeight: maxHeight,\n  }}\n  to=\"/new-game-mode\"\n>\n  <Svg.Customizable\n    svg={Add}\n    props={{\n      title: 'Add new game mode',\n      width: maxHeight,\n      height: maxHeight\n    }}\n  />\n  {shouldAddPrompt(maxHeight, maxWidth) ? <div\n    className={makeClasses(\n      'game-modes-add-game-mode-prompt',\n      'banner-rendered-prop-label'\n      )}\n  >\n    Add Game Mode\n  </div> : ''}\n</Link>\n\n\nconst GameModes = (): JSX.Element => {\n\n  const rulesets = useRulesets()\n  const selectedRulesetId = useRulesFromStorage()[1]\n\n  useRenderInBanner(AddGameMode)\n\n  const history = useHistory()\n\n  const handleOnClick = useCallback((id: string) => {\n    if (id === selectedRulesetId) {\n      history.push('/')\n      return\n    }\n\n    setCurrentRuleset(id)\n  }, [selectedRulesetId, history])\n\n  return <div className=\"Page game-modes\">\n    <ModesList\n      rulesets={rulesets}\n      selectedRulesetId={selectedRulesetId}\n      handleOnClick={handleOnClick}\n    />\n  </div>\n}\n\nexport default GameModes\n","import { Duration, sum, toSeconds } from 'duration-fns'\nimport React, {\n  createContext,\n  Reducer,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef\n} from 'react'\nimport { logger } from '../util/logger'\n\ntype TimerState = {\n  remainingTime: number,\n  isPaused: boolean,\n  startTime: Date,\n}\n\nenum TimerAction {\n  Pause = 'pause',\n  Resume = 'resume',\n  AddTime = 'add-time'\n}\n\ntype TimerReducerAction = {\n  type: TimerAction,\n  info: Date | Duration\n}\n\nconst TIMER_INTERVAL = 400\n\nexport const secondsBetweenDates = (start: Date, end: Date) => Math.round((end.getTime() - start.getTime()) / 1000)\n\nconst handlePause = (state: TimerState, pauseTime: Date) => {\n  const { isPaused, remainingTime, startTime } = state\n  if (isPaused) return state\n\n  return {\n    ...state,\n    isPaused: true,\n    remainingTime: remainingTime - secondsBetweenDates(startTime, pauseTime)\n  }\n}\n\nconst handleResume = (state: TimerState, resumeTime: Date) => {\n  const { isPaused } = state\n  if (!isPaused) return state\n\n  return {\n    ...state,\n    startTime: resumeTime,\n    isPaused: false\n  }\n}\n\nconst handleAddTime = (state: TimerState, time: Duration) => {\n  const { remainingTime: oldRemainingTime } = state\n  const remainingTime = toSeconds(sum({ seconds: oldRemainingTime }, time))\n  return {\n    ...state,\n    remainingTime\n  }\n}\n\nconst timerReducer = (state: TimerState, action: TimerReducerAction) => {\n  logger.debug('running timer reducer', JSON.stringify({ action }))\n  switch (action.type) {\n    case TimerAction.Pause:\n      return handlePause(state, action.info as Date)\n    case TimerAction.Resume:\n      return handleResume(state, action.info as Date)\n    case TimerAction.AddTime:\n      return handleAddTime(state, action.info as Duration)\n    default:\n      throw new Error(`${action.type} has not been implemented yet`)\n  }\n}\n\nexport type UseTimer = {\n  startTime: () => void,\n  pauseTime: () => void,\n  addTime: (time: Duration) => void,\n  getRemainingTime: () => number,\n  state: TimerState\n}\n\nconst getIntervalCallback = (state: TimerState, intervalRef: React.MutableRefObject<NodeJS.Timeout | undefined>, timeEndCallback: () => void) => {\n  // const id = uuid()\n  return () => {\n    if (state.isPaused) {\n      intervalRef.current && clearInterval(intervalRef.current)\n      intervalRef.current = undefined\n      return\n    }\n\n    const remainingTime = state.remainingTime - secondsBetweenDates(state.startTime, new Date())\n    // logger.debug(`timer interval running... remaining time: ${remainingTime}`, { id })\n    if (remainingTime <= 0) {\n      timeEndCallback()\n      intervalRef.current && clearInterval(intervalRef.current)\n      intervalRef.current = undefined\n    }\n  }\n}\n\nexport const useTimer = (totalTimeInSeconds: number, timeEndCallback: () => void): UseTimer => {\n  const [state, dispatch] = useReducer<Reducer<TimerState, TimerReducerAction>>(timerReducer, {\n    remainingTime: totalTimeInSeconds,\n    isPaused: true,\n    startTime: new Date()\n  })\n\n  const memoizedTimeEndCallback = useCallback(timeEndCallback, [timeEndCallback])\n\n  const startTime = useCallback(() => {\n    dispatch({ type: TimerAction.Resume, info: new Date() })\n  }, [dispatch])\n  const pauseTime = useCallback(() => {\n    dispatch({ type: TimerAction.Pause, info: new Date() })\n  }, [dispatch])\n  const addTime = useCallback((time: Duration) => {\n    dispatch({ type: TimerAction.AddTime, info: time })\n  }, [dispatch])\n\n  const getRemainingTime = useCallback(() => state.remainingTime - secondsBetweenDates(state.startTime, new Date()), [state])\n\n  const intervalRef = useRef<NodeJS.Timeout | undefined>(undefined)\n  const remainingTimeRef = useRef(totalTimeInSeconds)\n\n  useEffect(() => {\n    if (state.remainingTime === remainingTimeRef.current) return\n\n    const actualRemainingTime = state.remainingTime - secondsBetweenDates(state.startTime, new Date())\n    if (actualRemainingTime <= 0) return\n\n    logger.debug('timer addTime useEffect running...', { actualRemainingTime, remainingTimeRef: remainingTimeRef.current, stateRemainingTime: state.remainingTime })\n    remainingTimeRef.current = state.remainingTime\n\n    intervalRef.current && clearInterval(intervalRef.current)\n    intervalRef.current = setInterval(getIntervalCallback(state, intervalRef, memoizedTimeEndCallback), TIMER_INTERVAL)\n  }, [state, intervalRef, remainingTimeRef, memoizedTimeEndCallback])\n\n  useEffect(() => {\n    const remainingTime = state.remainingTime - secondsBetweenDates(state.startTime, new Date())\n    const shouldSetInterval = !state.isPaused\n      && intervalRef.current === undefined\n      && remainingTime > 0\n\n    logger.debug('timer useEffect setInterval running...', JSON.stringify({ remainingTime, shouldSetInterval, state }))\n    if (shouldSetInterval) {\n      intervalRef.current = setInterval(getIntervalCallback(state, intervalRef, memoizedTimeEndCallback), TIMER_INTERVAL)\n    }\n\n    // interval cleanup\n    return () => intervalRef.current && clearInterval(intervalRef.current)\n  }, [intervalRef, state, memoizedTimeEndCallback])\n\n  return useMemo(\n    () => ({\n      startTime,\n      pauseTime,\n      getRemainingTime,\n      addTime,\n      state\n      }),\n    [startTime,\n    pauseTime,\n    getRemainingTime,\n    addTime,\n    state\n    ]\n  )\n}\n\nexport type TimerContext = UseTimer\n\nexport const Timer = createContext<TimerContext>({\n  startTime: () => {},\n  pauseTime: () => {},\n  addTime: (_: Duration) => {},\n  getRemainingTime: () => 0,\n  state: {\n    isPaused: true,\n    startTime: new Date(),\n    remainingTime: 0\n  }\n})\n","import { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport { ReactComponent as EmojiEvents } from '@material-design-icons/svg/round/emoji_events.svg'\nimport { ReactComponent as PlayCircle } from '@material-design-icons/svg/round/play_circle.svg'\nimport { ReactComponent as GroupAdd } from '@material-design-icons/svg/round/group_add.svg'\nimport { ReactComponent as Language } from '@material-design-icons/svg/round/language.svg'\n\nimport Svg from '../components/Svg'\nimport { Rules, useRulesFromStorage } from '../game/rules'\nimport './Home.css'\nimport { CurrentGameType, GameType } from '../game'\nimport { useLanguageCodeFromLocalStorage } from '../game/language'\nimport { Translation } from '../translations/implemented-languages'\nimport { useTranslations } from '../translations'\nimport { makeClasses } from '../util/classes'\nimport { useHighScore } from '../game/high-scores'\nimport { useConstants } from '../style/constants'\n\nconst GameSettings = (): JSX.Element => {\n  const classes = makeClasses('home-game-option', 'home-button-defaults')\n\n  const ruleset = useContext(Rules)\n\n  const languageCode = useLanguageCodeFromLocalStorage() as any as keyof Translation['languageTitles']\n\n  const { languageTitles } = useTranslations()\n\n  const languageTitle = languageTitles[languageCode] || languageCode\n\n  return <div className=\"home-game-options\">\n    <Link to='/lexicons' className={classes}>\n      <Svg.Standard svg={Language} title=\"Lexicon\" />\n      <div>{languageTitle}</div>\n    </Link>\n    <Link to='/game-modes' className={classes}>\n      <Svg.Standard svg={EmojiEvents} title=\"Game Mode\"/>\n      <div>{ruleset.name}</div>\n    </Link>\n  </div>\n\n}\n\nconst Title = (): JSX.Element => {\n  return <div className=\"home-title\">\n    <div className=\"home-title-letters\">\n      {'LEXICA'.split('').map(l => <div className=\"home-title-letter\">{l}</div>)}\n    </div>\n    <div className=\"home-sub-title\">online</div>\n  </div>\n}\n\nconst PlayGameButtons = (): JSX.Element => {\n  const { fontSizeTitle } = useConstants()\n  const classes = makeClasses('home-button-defaults', 'home-play-game-button')\n\n  return <div className=\"home-game-buttons\">\n    <Link\n      to='/singleplayer'\n      className={classes}\n    >\n      <Svg.Customizable svg={PlayCircle} props={{\n        title: 'New Game',\n        height: fontSizeTitle,\n        width: fontSizeTitle\n      }}/>\n      New Game\n    </Link>\n    <Link\n      to='/multiplayer'\n      className={classes}\n    >\n      <Svg.Customizable svg={GroupAdd} props={{\n        title: 'New Game',\n        height: fontSizeTitle,\n        width: fontSizeTitle,\n      }}/>\n      Multiplayer\n    </Link>\n  </div>\n}\n\nconst HighScore = (): JSX.Element => {\n  const [{ name }, currentId] = useRulesFromStorage()\n  const highScore = useHighScore(currentId)\n  return <div className=\"home-high-score\">\n    <div>Mode: {name}</div>\n    <div>High Score: {highScore}</div>\n  </div>\n}\n\nconst Home = ({ setGameType }: { setGameType: (type: GameType) => void }) => {\n\n  const gameType = useContext(CurrentGameType)\n\n  if (gameType !== GameType.Create) setGameType(GameType.Create)\n\n  return <div className=\"Page home\">\n    <HighScore />\n    <Title />\n    <div className=\"home-buttons-container\">\n      <PlayGameButtons />\n      <GameSettings />\n    </div>\n  </div>\n}\n\nexport default Home\n","import * as R from 'ramda'\n\nimport { LetterScores, orderByWordScore, scoreWord } from '../../game';\nimport { Rules } from '../../game/rules'\n\nimport './ScoredWordList.css'\nimport { useContext } from 'react';\n\nexport type ScoredWordsProps = { scoredWords: string[] }\n\nconst ScoredWords: React.FC<ScoredWordsProps> = ({ scoredWords }) => {\n  const { score: scoreType } = useContext(Rules)\n  const letterScores = useContext(LetterScores)\n  const orderedWords = orderByWordScore(scoredWords, scoreType, letterScores)\n\n  const mapWithIndex = R.addIndex<string, JSX.Element>(R.map)\n\n  const makeScoredWord = (word: string, index: number) =>  <div className=\"scored-words-word\" key={index}>{word.toUpperCase()}</div> \n  const makeScore = (word: string, index: number) => <div className=\"scored-words-score\" key={index}>+{scoreWord(word, scoreType, letterScores)}</div>\n\n  return <div className=\"scored-words-container scrollbar\">\n    <div className=\"scored-words-words\">{mapWithIndex(makeScoredWord, orderedWords)}</div>\n    <div className=\"scored-words-scores\">{mapWithIndex(makeScore, orderedWords)}</div>\n    </div>\n}\n\nexport default ScoredWords\n","import { useContext, useMemo, useState } from 'react'\n\nimport { LetterScores, orderByWordScore } from \"../game\"\nimport ScoredWordList from './game/ScoredWordList'\nimport { useConstants } from '../style/constants'\n\nimport './ResultsScreen.css'\nimport { ReactComponent as CheckCircle } from '@material-design-icons/svg/round/check_circle.svg'\nimport { ReactComponent as HighlightOff } from '@material-design-icons/svg/round/highlight_off.svg'\nimport Score from './game/Score'\nimport { Rules } from '../game/rules'\nimport { Score as ScoreContext } from '../game/score'\nimport { makeClasses } from '../util/classes'\nimport { ScreenOrientation, useOrientation } from '../util/hooks'\n\nenum Lists {\n  FoundWords = 'found',\n  MissedWords = 'missed'\n}\n\ntype ListSelectorProps = {\n  listName: Lists,\n  displayedList: Lists,\n  updateDisplayedList: (list: Lists) => void,\n  orientation: ScreenOrientation\n}\n\nconst ListSelector: React.FC<ListSelectorProps> = ({\n  listName,\n  displayedList,\n  updateDisplayedList,\n  orientation\n}) => {\n  const constants = useConstants()\n\n  const title = listName === Lists.FoundWords\n    ? 'Found words'\n    : 'Missed words'\n\n  const svgProps = {\n    fill: constants.colorContentDark,\n    width: constants.fontSize,\n    height: constants.fontSize,\n    title\n  }\n  const svg = listName === Lists.FoundWords\n    ? <CheckCircle {...svgProps} />\n    : <HighlightOff {...svgProps}/>\n\n  const selectorClass = makeClasses(\n    'results-list-selector-button',\n    orientation,\n    { condition: displayedList === listName, name: 'selected' }\n  )\n\n    return <div\n      className={selectorClass}\n      onClick={() =>updateDisplayedList(listName)}\n    >\n      {svg}\n      <div className={`results-select-${listName}-words`}>{title}</div>\n    </div>\n}\n\nconst Results: React.FC = () => {\n  const orientation = useOrientation()\n  const { foundWords, remainingWords } = useContext(ScoreContext)\n  const letterScores = useContext(LetterScores)\n\n  const [displayedList, updateDisplayedList] = useState(Lists.FoundWords)\n  const { score: scoreType } = useContext(Rules)\n  const orderedFoundWords = useMemo(() => orderByWordScore(foundWords, scoreType, letterScores), [foundWords, scoreType, letterScores])\n  const orderedMissedWords = useMemo(() => orderByWordScore(remainingWords, scoreType, letterScores), [remainingWords, scoreType, letterScores])\n\n  let foundWordsClass = makeClasses(\n    'results-found-words',\n    orientation,\n    { condition: displayedList === Lists.MissedWords, name: 'disabled' }\n  )\n  let missedWordsClass = makeClasses(\n    'results-missed-words',\n    orientation,\n    { condition: displayedList === Lists.FoundWords, name: 'disabled' }\n    )\n\n  const listSelectorProps = { displayedList, updateDisplayedList, orientation }\n\n  return <div className=\"results\">\n    <Score hideTime showPercent />\n    <div className={`titles ${orientation}`}>\n      <div\n        className={displayedList === Lists.MissedWords ? 'disabled' : ''}\n      >\n        Found Words\n      </div>\n      <div\n        className={displayedList === Lists.FoundWords ? 'disabled' : ''}\n      >\n        Missed Words\n      </div>\n    </div>\n    <div className={`results-main-container ${orientation}`}>\n      <div className={foundWordsClass}>\n        <ScoredWordList {...{\n          scoredWords: orderedFoundWords,\n          scoreType\n        }}/>\n      </div>\n      <div className={missedWordsClass}>\n        <ScoredWordList {...{\n          scoredWords: orderedMissedWords,\n          scoreType\n        }}/>\n      </div>\n    </div>\n    <div className={`results-list-selector ${orientation}`}>\n      <ListSelector {...{ ...listSelectorProps, listName: Lists.FoundWords }}/>\n      <ListSelector {...{ ...listSelectorProps, listName: Lists.MissedWords }}/>\n    </div>\n  </div>\n}\n\nexport default Results\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { LetterScores, scoreWord } from '../../game'\nimport { Score as ScoreContext} from '../../game/score'\nimport { Rules } from '../../game/rules'\nimport './Score.css'\nimport { secondsBetweenDates, Timer, TimerContext } from '../../game/timer'\n\nconst getTime = (timeInSeconds: number) => {\n  const seconds = timeInSeconds % 60\n  const minutes = Math.floor(timeInSeconds / 60)\n  const getFormatted = (num: number) => (num < 0 ? 0 : num).toString().padStart(2, '0')\n  return `${getFormatted(minutes)}:${getFormatted(seconds)}`\n}\n\nconst getRemainingTime = (remainingTime: number, { startTime }: TimerContext['state']) => {\n  return remainingTime - secondsBetweenDates(startTime, new Date())\n}\n\nconst Score: React.FC<{\n  hideTime?: boolean,\n  showPercent?: boolean\n}> = ({\n  hideTime,\n  showPercent\n}) => {\n  const { score: scoreType } = useContext(Rules)\n  const letterScores = useContext(LetterScores)\n\n  const { state } = useContext(Timer)\n  const rules = useContext(Rules)\n\n  const remainingTimeRef = useRef(state.remainingTime)\n\n  const [remainingTime, setRemainingTime] = useState(getRemainingTime(state.remainingTime, state))\n  const [showTimeAddition, setShowTimeAddition] = useState(false)\n  const [timeAddition, setTimeAddition] = useState(0)\n\n  const { foundWords, remainingWords } = useContext(ScoreContext)\n\n\n  useEffect(() => {\n    const { remainingTime } = state\n    const interval = setInterval((() => setRemainingTime(getRemainingTime(remainingTime, state))), 400)\n\n    return () => interval && clearInterval(interval)\n  }, [state, setRemainingTime, state.remainingTime])\n\n  useEffect(() => {\n    if (!rules.timeAttack || state.remainingTime === remainingTimeRef.current)\n      return\n\n    const timeChange = state.remainingTime - remainingTimeRef.current\n    remainingTimeRef.current = state.remainingTime\n    setTimeAddition(timeChange)\n\n    setShowTimeAddition(true)\n    setTimeout(() => setShowTimeAddition(false), 1000)\n  }, [rules, state.remainingTime, remainingTimeRef, setTimeAddition])\n\n  const currentScore = useMemo(() => foundWords.reduce(\n    (score: number, word: string) => scoreWord(word, scoreType, letterScores) + score,\n    0\n  ), [scoreType, letterScores, foundWords])\n  const totalScore = useMemo(() => remainingWords.reduce(\n    (score: number, word: string) => scoreWord(word, scoreType, letterScores) + score,\n    0\n  ), [scoreType, letterScores, remainingWords]) + currentScore\n  const foundCount = foundWords.length\n  const totalCount = remainingWords.length + foundCount\n  return (\n    <div className=\"container\">\n      <div\n        className=\"section\"\n        style={hideTime ? { display: 'none'} : {}}\n      >\n        <div className=\"title\">Time</div>\n        <div className=\"info\">{getTime(remainingTime || 0)}</div>\n        {showTimeAddition ? <div className=\"score-time-addition\">+{timeAddition}</div> : ''}\n      </div>\n      <div className=\"section\">\n        <div className=\"title\">Words</div>\n        <div className=\"info\">\n          {foundCount}/{totalCount}{showPercent ? ` (${Math.floor((foundCount/totalCount) * 100)}%)` : '' }\n        </div>\n      </div>\n      <div className=\"section\">\n        <div className=\"title\">Score</div>\n        <div className=\"info\">\n          {currentScore}/{totalScore}{showPercent ? ` (${Math.floor((currentScore/totalScore) * 100)}%)` : ''}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Score\n","import * as R from 'ramda'\nimport { Function as F } from 'ts-toolbelt'\n\nimport { Board, Letter, Coordinates } from './types'\n\nconst splitLineAlongRows = (line: string[]) => {\n  const width = Math.sqrt(line.length)\n\n  if (Math.floor(width) !== width) {\n    // logger.debug(width, line, \"doesn't make a square\")\n    throw new Error(`${line} doesn't make a square`)\n  }\n\n  return R.splitEvery(width, line)\n}\n\n\nexport const getBoard = (line: string[]): Board => {\n  const board = splitLineAlongRows(line)\n\n  type Row = Omit<Board[number], 'index'>\n\n  const getColumns = R.pipe<string[], Board[number][number][], Row>(\n    R.addIndex<string, Board[number][number]>(R.map)((letter: string, index: number) => ({\n      letter,\n      visited: false,\n      index\n    })),\n    R.reduce<Board[number][number], Row>((acc: Row, column: Board[number][number]) => ({\n      ...acc,\n      [column.index]: column\n    }), {})\n  )\n  const getRows = R.addIndex<string[], Board[number]>(R.map)((row: string[], index: number) => ({\n    ...getColumns(row),\n    index\n  }))\n\n  return { ...getRows(board), width: board.length }\n}\n\nconst boardMap = <T>(board: Board, callback: (letter: Letter, coordinates: Coordinates) => T): T[] => {\n  const { width } = board\n  let response: T[] = []\n  for(let row = 0; row < width; row++) {\n    for(let column = 0; column < width; column++) {\n      response.push(callback(board[row][column], { row, column }))\n    }\n  }\n  return response\n}\n\ntype VisitNeighbors<T> = (options: VisitNeighborsOptions<T>, board: Board, coordinates: Coordinates) => T[]\n\nconst visitNeighbors_ = <T>({ callback, onlyUnvisitedNeighbors }: VisitNeighborsOptions<T>, board: Board, coordinates: Coordinates): T[] => {\n  const neighbors = getPossibleTravelDirections({\n    ...coordinates,\n    width: board.width\n  })\n\n  class VisitedNeighbor {}\n\n  const results = R.map<Coordinates, VisitedNeighbor | T>(\n    ({ row, column }) => {\n      const envokeCallback = () => callback(board[row][column], { row, column })\n\n      if (onlyUnvisitedNeighbors) return board[row][column].visited ? new VisitedNeighbor() : envokeCallback()\n\n      return envokeCallback()\n    }, neighbors)\n\n  return results.filter(val => !(val instanceof VisitedNeighbor)) as T[]\n}\n\nexport type VisitNeighborsCallback<T> = (neighbor: Letter, coordinates: Coordinates) => T\n\nexport type VisitNeighborsOptions<T> = {\n  callback: VisitNeighborsCallback<T>,\n  onlyUnvisitedNeighbors?: boolean\n}\n\nexport function visitNeighbors<T>(options: VisitNeighborsOptions<T>): F.Curry<(board: Board, coordinates: Coordinates) => T[]>\nexport function visitNeighbors<T>(options: VisitNeighborsOptions<T>, board: Board): F.Curry<(coordinates: Coordinates) => T[]>\nexport function visitNeighbors<T>(options: VisitNeighborsOptions<T>, board: Board, coordinates: Coordinates): T[]\nexport function visitNeighbors<T>(options: VisitNeighborsOptions<T>, board?: any, coordinates?: any) {\n  const curried = R.curryN(3, visitNeighbors_ as VisitNeighbors<T>)(options)\n\n  return board\n    ? coordinates\n      ? curried(board as Board, coordinates as Coordinates)\n      : curried(board as Board)\n    : curried\n}\n\n\nexport const boardReduce = <Acc>(\n  board: Board,\n  callback: (acc: Acc, letter: Letter, coordinates: Coordinates) => Acc,\n  initialValue: Acc\n) => {\n  const { width } = board\n  let acc = initialValue\n\n  for(let row = 0; row < width; row++) {\n    for(let column = 0; column < width; column++) {\n      acc = callback(acc, board[row][column], { row, column })\n    }\n  }\n  return acc\n}\n\nexport const getLine = (board: Board) => {\n  return boardMap(board, ({ letter }) => letter)\n}\n\nexport const deepCopyBoard = (board: Board) => {\n  const { width } = board\n  const copy = { width } as Board\n  for(let row = 0; row < width; row++) {\n    copy[row] = { index: row }\n    for(let column = 0; column < width; column++) {\n      copy[row][column] = { ...board[row][column] }\n    }\n  }\n  return copy\n}\n\nexport const getUnvisitedBoard = (board: Board) => {\n  const copy = deepCopyBoard(board)\n  const { width } = copy\n\n  for(let row = 0; row < width; row++) {\n    for(let column = 0; column < width; column++) {\n      copy[row][column].visited = false\n    }\n  }\n\n  return copy\n}\n\nexport const getAllPossibleCoordinates = ({ rows, columns }: { rows: number[], columns: number[]}) => R.reduce<number, Coordinates[]>(\n  (acc: Coordinates[], row: number) => [\n    ...acc,\n    ...R.map<number, Coordinates>((column: number) => ({ row, column }), columns)\n  ],\n  [],\n  rows\n)\n\nexport const getPossibleTravelDirections = ({ row, column, width }: { row: number, column: number, width: number}) => {\n  const unfilteredRows = [row - 1, row, row + 1]\n  const rows = R.filter((potentialRow: number) => potentialRow >= 0 && potentialRow < width, unfilteredRows)\n  const unfilteredColumns = [column - 1, column, column + 1]\n  const columns = R.filter((potentialColumn: number) => potentialColumn >= 0 && potentialColumn < width, unfilteredColumns)\n\n  const coordinates = getAllPossibleCoordinates({ rows, columns })\n\n  return R.filter<Coordinates>(({ row: currentRow, column: currentColumn }) => !(row === currentRow && column === currentColumn), coordinates)\n}\n\n","import { createContext, Dispatch, Reducer, useEffect, useReducer, useState } from 'react'\nimport { logger } from '../util/logger'\nimport { deepCopyBoard, getBoard, getPossibleTravelDirections, getUnvisitedBoard } from './board/util'\nimport { Board, Coordinates } from './board/types'\n\nexport enum GuessAction {\n  EnterLetter = 'enter-letter',\n  BeginGuess = 'begin-guess',\n  EndGuess = 'end-guess',\n  __UpdateBoard = 'updateBoard'\n}\n\nexport type GuessActionType<A extends GuessAction> = {\n  type: A\n  info: A extends GuessAction.EnterLetter\n    ? Coordinates\n    : A extends GuessAction.__UpdateBoard\n    ? Board\n    : never\n}\n\nexport type GuessState = {\n  currentGuess: string,\n  guesses: string[],\n  isGuessing: boolean,\n  currentLetter: Coordinates,\n  board: Board\n}\n\nconst handleBeginGuess = (state: GuessState): GuessState => {\n  const {\n    currentLetter: { row, column },\n    board\n  } = state\n\n  const newBoard = deepCopyBoard(board)\n\n  logger.debug('handling begin guess...')\n\n  newBoard[row][column].visited = true\n\n  const newState = {\n    ...state,\n    isGuessing: true,\n    currentGuess: board[row][column].letter,\n    board: newBoard\n  }\n\n  logger.debug(`updating state... newState === state: ${Object.is(state, newState)}`)\n  return newState\n}\n\nconst handleEndGuess = (state: GuessState): GuessState => {\n  const {\n    board,\n    currentGuess,\n    guesses\n  } = state\n\n  const newBoard = getUnvisitedBoard(board)\n\n  return {\n    ...state,\n    currentGuess: '',\n    board: newBoard,\n    guesses: [...guesses, currentGuess],\n    isGuessing: false\n  }\n}\n\nconst isValidMove = ({ board, currentLetter }: GuessState, newCoords: Coordinates) => {\n    const possibleTravelDirections = getPossibleTravelDirections({ ...currentLetter, width: board.width })\n\n    if (!possibleTravelDirections.filter(cw => newCoords.column === cw.column && newCoords.row === cw.row).length) {\n      return false\n    }\n\n    const { row, column } = newCoords\n    if (board[row][column].visited) {\n      return false\n    }\n\n    return true\n}\n\nconst areSameCoordinates = (a: Coordinates, b: Coordinates) => {\n  return a.row === b.row && a.column === b.column\n}\n\nconst handleEnterLetterWhileGuessing = (state: GuessState, coordinates: Coordinates): GuessState => {\n  const { currentLetter } = state\n\n  const noUpdatesNeeded = areSameCoordinates(currentLetter, coordinates) || !isValidMove(state, coordinates)\n\n  if (noUpdatesNeeded) return state\n\n  const { currentGuess, board } = state\n\n  const { row, column } = coordinates\n\n  const boardCopy = deepCopyBoard(board)\n\n  const toAppend = boardCopy[row][column].letter\n\n  boardCopy[row][column].visited = true\n\n  return {\n    ...state,\n    currentGuess: `${currentGuess}${toAppend}`,\n    board: boardCopy,\n    currentLetter: { ...coordinates },\n  }\n}\n\nconst handleEnterLetter = (state: GuessState, coordinates: Coordinates): GuessState => {\n  if (state.isGuessing) return handleEnterLetterWhileGuessing(state, coordinates)\n\n  // save on screen rendering by returning same state object, even though mutation is usually not good\n  state.currentLetter = coordinates\n\n  return state\n}\n\nconst handleUpdateBoard = (state: GuessState, board: Board): GuessState => ({\n  ...state,\n  board: deepCopyBoard(board)\n})\n\nexport const guessReducer = <A extends GuessAction>(state: GuessState, action: GuessActionType<A>) => {\n  logger.debug(`Guess reducer called... action type: ${action.type}`)\n  switch (action.type) {\n    case GuessAction.__UpdateBoard:\n      return handleUpdateBoard(state, action.info as Board)\n    case GuessAction.EnterLetter:\n      return handleEnterLetter(state, action.info as Coordinates)\n    case GuessAction.BeginGuess:\n      return handleBeginGuess(state)\n    case GuessAction.EndGuess:\n      return handleEndGuess(state)\n    default:\n      throw new Error(`${action.type} action has not been implemented!`)\n  }\n}\n\ntype GuessReducer = Reducer<GuessState, GuessActionType<GuessAction>>\n\nexport const useGuesses = (board: string[]) => {\n  const [stateBoard] = useState(getBoard(board))\n\n  const reducer = useReducer<GuessReducer>(guessReducer, {\n    board: stateBoard,\n    currentGuess: '',\n    guesses: [],\n    currentLetter: { row: 0, column: 0 },\n    isGuessing: false\n  })\n\n  const dispatch = reducer[1]\n\n  useEffect(() => {\n    logger.debug('running useGuesses useEffect....')\n    dispatch({ info: getBoard(board), type: GuessAction.__UpdateBoard })\n\n  }, [board, dispatch])\n\n  return reducer\n}\n\nexport type GuessContext = GuessState\n\nexport const Guess = createContext<GuessContext>({\n  board: { width: 0 },\n  currentGuess: '',\n  currentLetter: { row: 0, column: 0 },\n  guesses: [],\n  isGuessing: false\n})\n\nexport type GuessDispatchContext = Dispatch<GuessActionType<GuessAction>>\n\nexport const GuessDispatch = createContext<GuessDispatchContext>(() => {})\n","import { useContext, useEffect, useMemo, useReducer, useState } from 'react'\n\nimport { Score } from '../../../game/score'\nimport { Guess } from '../../../game/guess'\nimport { logger } from '../../../util/logger'\n\nenum ConfirmationType {\n  Correct = 'correct',\n  Stale = 'stale',\n  Incorrect = 'incorrect'\n}\n\nconst getConfirmationType = (lastGuess: string, { foundWords, remainingWords }: { foundWords: string[], remainingWords: string[] }, guesses: string[]) => {\n  const lastFoundWord = foundWords[foundWords.length -1]\n  logger.debug({ lastGuess, lastFoundWord })\n  const isCorrectGuess = lastGuess === lastFoundWord || remainingWords.includes(lastGuess)\n  if (isCorrectGuess && guesses.indexOf(lastGuess) === guesses.length -1)\n    return ConfirmationType.Correct\n\n  if (foundWords.includes(lastGuess)) return ConfirmationType.Stale\n  return ConfirmationType.Incorrect\n}\n\nexport const useConfirmationEffect = (visited: boolean) => {\n  const [shouldShowVisualFeedback, dispatch] = useReducer((_: boolean, action: boolean) => action, false)\n  const [lastGuess, setLastGuess] = useState('')\n  const [feedbackClasses, setFeedbackClasses] = useState('')\n  const score = useContext(Score)\n  const { currentGuess, isGuessing, guesses } = useContext(Guess)\n\n  useEffect(() => {\n    if (currentGuess.length === 0) return\n    setLastGuess(currentGuess)\n  }, [setLastGuess, currentGuess])\n\n  const triggerFeedback = useMemo(\n    () => !isGuessing && shouldShowVisualFeedback && currentGuess !== lastGuess,\n    [isGuessing, currentGuess, shouldShowVisualFeedback, lastGuess]\n  )\n\n  useEffect(() => {\n    if (shouldShowVisualFeedback) return\n    if (visited) dispatch(true)\n  }, [shouldShowVisualFeedback, visited, dispatch])\n\n  useEffect(() => {\n    if (!triggerFeedback) return\n\n    dispatch(false)\n    const type = getConfirmationType(lastGuess, score, guesses)\n    logger.debug('triggering feedback', type)\n    setFeedbackClasses(`board-letter-${type}`)\n    setTimeout(() => setFeedbackClasses(''), 260)\n\n  }, [triggerFeedback, dispatch, setFeedbackClasses, lastGuess, score, guesses])\n\n\n  return feedbackClasses\n}\n\n","const getMagnitued = (v1: Point2, v2: Point2) => {\n  const x = Math.abs(v1.x - v2.x)\n  const y = Math.abs(v1.y -v2.y)\n  return Math.sqrt(x*x+y*y)\n}\n\nexport type Point2 = { x: number, y: number }\n\nexport type GetPointOnGridInfoArguments = {\n  gridOrigin: Point2,\n  squareDimensions: Point2,\n  point: Point2,\n  useBoundingBox?: boolean\n  boundingBox: { min: Point2, max: Point2 }\n}\n\nexport type PointOnGridInfo = {\n  residingSquare: Point2\n  centerOfSquare: Point2\n  pointDistanceFromCenterOfSquare: number\n}\n\nexport const getPointOnGridInfo = ({\n  gridOrigin,\n  squareDimensions,\n  point,\n  useBoundingBox,\n  boundingBox\n}: GetPointOnGridInfoArguments): PointOnGridInfo => {\n  const { x: originX, y: originY } = gridOrigin\n  const { x: width, y: height } = squareDimensions\n  const { x, y } = point\n\n  const getUnadjustedIndex = (dimension: number, point: number, offset: number) => {\n    const isNegative = point < 0\n    return Math.floor((point - offset) / dimension) * (isNegative ? -1 : 1)\n  }\n\n  const getOffset = (dimension: number, origin: number) => origin % dimension\n  const xOffset = getOffset(width, originX)\n  const yOffset = getOffset(height, originY)\n\n  const xIndexUnadjusted = getUnadjustedIndex(width, x, xOffset)\n  const xBaseIndex = getUnadjustedIndex(width, originX, xOffset)\n\n  const yIndexUnadjusted = getUnadjustedIndex(height, y, yOffset)\n  const yBaseIndex = getUnadjustedIndex(height, originY, yOffset)\n\n  const xIndex = xIndexUnadjusted - xBaseIndex\n  const yIndex = yIndexUnadjusted - yBaseIndex\n  const getBoundedIndex = (min: number, max: number, index: number) => useBoundingBox\n    ? (index < min ? min : index > max ? max : index)\n    : index\n\n  const residingSquare = {\n    x: getBoundedIndex(boundingBox.min.x, boundingBox.max.x, xIndex),\n    y: getBoundedIndex(boundingBox.min.y, boundingBox.max.y, yIndex)\n  }\n\n  const getCenterOfIndex = (index: number, dimension: number, origin: number) => Math.round(index * dimension + dimension / 2 + origin)\n\n  const centerOfSquare = {\n    x: getCenterOfIndex(residingSquare.x, width, originX),\n    y: getCenterOfIndex(residingSquare.y, height, originY)\n  }\n  const averageDimension = (width + height) / 2\n\n  const pointDistanceFromCenterOfSquare = getMagnitued(point, centerOfSquare) / averageDimension\n\n  return {\n    residingSquare,\n    centerOfSquare,\n    pointDistanceFromCenterOfSquare\n  }\n}\n","import React, { useContext, } from 'react'\nimport * as R from 'ramda'\n\nimport './Board.css'\nimport { useConfirmationEffect } from './hooks'\n\nimport { getPointOnGridInfo, GetPointOnGridInfoArguments } from '../../../util/touch'\nimport { getLetterScore, LetterScores,  } from '../../../game'\nimport { Rules } from '../../../game/rules'\nimport { ScoreType } from '../../../game/score'\nimport { Guess, GuessAction, GuessActionType, GuessDispatch } from '../../../game/guess'\nimport { logger } from '../../../util/logger'\nimport { makeClasses } from '../../../util/classes'\n\ntype LetterProps = {\n  row: number,\n  column: number,\n  letter: string,\n  visited: boolean,\n}\n\nconst Letter: React.FC<LetterProps> = ({\n  row,\n  column,\n  letter,\n  visited,\n}) => {\n  const feedbackClasses = useConfirmationEffect(visited)\n\n  const guessDispatch = useContext(GuessDispatch)\n\n  const { score: scoreType } = useContext(Rules)\n\n  const letterScores = useContext(LetterScores)\n\n  const classes = makeClasses('spacer', { condition: visited, name: 'visited' }, feedbackClasses)\n\n  const dispatchMoveEvent = () => { guessDispatch({ type: GuessAction.EnterLetter, info: { row, column } }); logger.debug(`${row}-${column} hover`) }\n\n  const showScore = scoreType === ScoreType.Letters || undefined\n\n  return <div\n    className={classes}\n    key={`spacer-${row}-${column}`}\n  >\n    <div\n      className=\"activator\"\n      onMouseOver={dispatchMoveEvent}\n      onTouchStart={e => e.preventDefault()}\n    >\n      <div className=\"letter\">{letter.toUpperCase()}</div>\n    </div>\n    {showScore && <div className=\"board-letter-score\">{getLetterScore(letter, letterScores)}</div>}\n  </div>\n}\n\nconst Row: React.FC<{ row: number }> = ({ row, children }) => <div className=\"row\" key={row} >{children}</div>\n\ntype enumerable = { [key: number]: any }\n\ntype ArrayLike<T extends enumerable = any> = (T[number] extends infer X ? { [key: number]: X } : never) & { length: number }\nfunction getLast<T extends ArrayLike>(items: T): T[number] { \n  const { length } = items\n  return items[length - 1]\n}\n\n\nexport const Board: React.FC = () => {\n  const dispatch = useContext(GuessDispatch)\n\n  const { board } = useContext(Guess)\n\n  const handleClick = (clicked: boolean) => {\n    clicked\n      ? dispatch({ type: GuessAction.BeginGuess } as GuessActionType<GuessAction.BeginGuess>)\n      : dispatch({ type: GuessAction.EndGuess } as GuessActionType<GuessAction.EndGuess>)\n  }\n\n  const boardWidth = board.width\n\n  const makeColumn = (row: number) => (column: number) => <Letter {...{\n    row,\n    column,\n    ...board[row][column],\n    key: `letter-${row}-${column}`\n  }}/>\n\n  const makeRows = (row: number) => <Row row={row} key={`row-${row}`}>{R.times(makeColumn(row), boardWidth)}</Row>\n\n  const maybeDispatchMove = ({ clientX, clientY }: React.Touch, acceptableDistance: number) => {\n    const board = document.getElementsByClassName('board')[0]\n    const { top, bottom, left } = board.getBoundingClientRect()\n    const divisionAmount = (bottom-top)/boardWidth\n\n    const gridOrigin = { x: left, y: top }\n    const point = { x: clientX, y: clientY }\n    const squareDimensions = { x: divisionAmount, y: divisionAmount }\n    const boundingBox = { min: { x: 0, y: 0 }, max: { x: boardWidth - 1, y: boardWidth - 1 }}\n    const options: GetPointOnGridInfoArguments = { gridOrigin, point, squareDimensions, useBoundingBox: true, boundingBox }\n\n    const { residingSquare, pointDistanceFromCenterOfSquare } = getPointOnGridInfo(options)\n    const { x: column, y: row } = residingSquare\n\n    if (pointDistanceFromCenterOfSquare <= acceptableDistance) {\n      dispatch({ type: GuessAction.EnterLetter, info: { row, column } })\n    }\n  }\n\n  return <div\n    className=\"board\"\n    onMouseDown={() => { handleClick(true); /* logger.debug('start click') */ }}\n    onMouseUp={() => { handleClick(false); /* logger.debug('end click') */ }}\n    onTouchStart={(e) => {\n      // Should prevent accidental triggering of ios swipe to go back\n      e.preventDefault()\n\n      const lastTouch = getLast(e.touches)\n      maybeDispatchMove(lastTouch, 1)\n      handleClick(true)\n    }}\n    onTouchMove={(e) => {\n      const lastTouch = getLast(e.touches)\n      maybeDispatchMove(lastTouch, .5)\n    }}\n    onTouchEnd={() => handleClick(false)}\n  >\n    {R.times(makeRows, boardWidth)}\n  </div>\n}\n\nexport default Board\n","import * as R from 'ramda'\nimport { useContext } from 'react'\n\nimport './Guesses.css'\nimport { Guess as GuessContext } from '../../game/guess'\nimport { makeClasses } from '../../util/classes'\nimport { Score } from '../../game/score'\n\ntype GuessProps = {\n  guess: string,\n  isFirstGuess: boolean,\n  isInDictionary: boolean\n  index: number\n}\nconst Guess: React.FC<GuessProps> = ({ guess, isFirstGuess, isInDictionary, index }) => {\n  const firstAndCorrect = isFirstGuess && isInDictionary\n  const correct = isInDictionary\n\n  const className = correct\n    ? firstAndCorrect\n      ? 'correct-guess'\n      : 'repeat-guess'\n    : 'incorrect-guess'\n\n  return <div {...{ className, key: index }}>{guess.toUpperCase()}</div>\n}\n\nconst getGuessInfo = (guess: string, guesses: string[], dictionary: string[], index: number = 0) => {\n  const isFirstGuess = guesses.lastIndexOf(guess) === index\n  const isInDictionary = dictionary.includes(guess) \n\n  return { isFirstGuess, isInDictionary }\n}\n\nexport enum GuessOrientation {\n  Vertical = 'vertical',\n  Horizontal = 'horizontal'\n}\n\nexport type GuessesProps = {\n orientation: GuessOrientation\n}\n\nconst Guesses: React.FC<GuessesProps> = ({ orientation }) => {\n  const { guesses } = useContext(GuessContext)\n  const { foundWords: dictionary } = useContext(Score)\n  const guessesReversed = R.reverse(guesses)\n  const indexedMap = R.addIndex<string, JSX.Element>(R.map)\n\n  const makeGuess = (guess: string, index: number) => {\n    const guessInfo = getGuessInfo(guess, guessesReversed, dictionary, index)\n    return <Guess {...{ guess, ...guessInfo, index, key: index }}/>\n  }\n\n\n\n  return <div className={makeClasses(\n    'guess-list',\n    orientation\n  )} >\n    {indexedMap(makeGuess, guessesReversed)}\n  </div>\n}\n\nexport default Guesses\n","import Board from './Board'\n\nexport * from './Board'\nexport default Board","import * as R from \"ramda\"\nimport { deepCopyBoard, visitNeighbors, boardReduce } from \"../board/util\"\nimport { Board, Coordinates } from \"../board/types\"\n\n\nconst visitNeighborsCallback = (remainingWords: string[], lettersSoFar: string, board: Board) =>\n  (square: Board[number][number], coords: Coordinates): string[] => {\n    const letterChain = `${lettersSoFar}${square.letter}`\n    const letterChainIsWord = remainingWords.includes(letterChain)\n    const wordsToFilter = letterChainIsWord ? remainingWords.filter(w => w !== letterChain) : remainingWords\n\n    const toReturn = letterChainIsWord ? [letterChain] : [] as string[]\n\n    const partialLetterChainMatches = wordsToFilter.filter(w => w.indexOf(letterChain) === 0)\n    if (partialLetterChainMatches.length) {\n      const { row, column } = coords\n      const newBoard = deepCopyBoard(board)\n      newBoard[row][column].visited = true\n\n      const callback = visitNeighborsCallback(partialLetterChainMatches, letterChain, newBoard)\n\n      const visitResults = R.flatten(visitNeighbors({ callback, onlyUnvisitedNeighbors: true}, newBoard, coords))\n      return [...toReturn, ...visitResults]\n    }\n\n    return toReturn\n  }\n\nexport const getWordsOnBoard = (board: Board, dictionary: string[], minWordLength: number) => {\n  const wordsOfValidLength = dictionary.filter(w => w.length >= minWordLength)\n  const { foundWords } = boardReduce(board, ({ remainingWords, foundWords }, square, coordinates) => {\n    if (!remainingWords.length) return { remainingWords, foundWords }\n    const { row, column } = coordinates\n\n    // edge-case of min-length of words being 1...\n    if (remainingWords.includes(square.letter)) {\n      foundWords.push(square.letter)\n      remainingWords.splice(remainingWords.indexOf(square.letter), 1)\n    }\n\n    const newBoard = deepCopyBoard(board)\n    newBoard[row][column].visited = true\n\n    const callback = visitNeighborsCallback(remainingWords, square.letter, newBoard)\n\n    const newFoundWords = R.flatten(visitNeighbors({ callback, onlyUnvisitedNeighbors: true }, newBoard, coordinates))\n\n    const undiscoveredWords = R.reject(w => newFoundWords.includes(w), remainingWords)\n\n    return { remainingWords: undiscoveredWords, foundWords: [...foundWords, ...newFoundWords] }\n\n  }, { remainingWords: wordsOfValidLength, foundWords: [] as string[] })\n\n  return R.uniq(foundWords)\n}\n","import { createContext, useEffect, useMemo, useState } from 'react'\n\nimport { getWordsOnBoard } from './util'\nimport { ToWorkerMessage } from './types'\n\nimport { getBoard } from '../board/util'\nimport { LanguageState } from '../language'\n\nimport { logger } from '../../util/logger'\nimport { promisifyWorker } from '../../util/web-worker'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Worker from 'worker-loader!./dictionary.worker.ts'\n\nconst worker = window.Worker ? new Worker() : undefined\n\nconst resolveDictionary = (line: string[], fullDictionary: string[], minimumWordLength: number) => {\n  if (window.Worker) {\n    const toSend = {\n      board: getBoard(line),\n      dictionary: fullDictionary,\n      minWordLength: minimumWordLength\n    }\n    return promisifyWorker<ToWorkerMessage, string[]>(worker!, toSend)\n  }\n  return Promise.resolve(getWordsOnBoard(getBoard(line), fullDictionary, minimumWordLength))\n}\n\n\nexport type DictionaryState = {\n  boardDictionary: string[],\n  loading: boolean\n}\n\nexport const useBoardDictionary = (languageState: LanguageState, board: string[], minimumWordLength: number) => {\n  const [loading, setLoading] = useState(true)\n  const [boardDictionary, setDictionary] = useState<string[]>([])\n\n  useEffect(() => {\n    logger.debug('running dictionary useEffect')\n    setLoading(true)\n    resolveDictionary(board, languageState.dictionary, minimumWordLength).then(dict => {\n      setDictionary(dict)\n      setLoading(false)\n    })\n\n  }, [\n    board,\n    languageState,\n    setDictionary,\n    setLoading,\n    minimumWordLength\n  ])\n\n  return useMemo(() => ({ boardDictionary, loading }), [boardDictionary, loading])\n}\n\nexport type DictionaryContext = DictionaryState\n\nexport const Dictionary = createContext<DictionaryContext>({ boardDictionary: [], loading: true })\n\n","import { Ruleset } from '../../game/rules'\nimport { getSearchString } from '../../game/url'\nimport constants from '../../style/constants'\nimport { useCssExp } from '../../util/css-parse'\nimport { ScreenOrientation, useOrientation } from '../../util/hooks'\nimport QrCode from '../QrCode'\n\nexport enum Platform {\n  Android = 'android',\n  Web = 'web'\n}\n\nconst getBaseUrl = (platform: Platform) => {\n  switch (platform) {\n    case Platform.Android:\n      return 'https://lexica.github.io/m'\n    case Platform.Web:\n      return 'https://lexica.github.io/multiplayer'\n  }\n}\n\nexport type ShareGameQrCodeProps = {\n  platform: Platform\n  rules: Ruleset\n  board: string[]\n  language: string\n}\n\nconst ShareGameQrCode = ({\n  board,\n  rules,\n  language,\n  platform\n}: ShareGameQrCodeProps) => {\n  const search = getSearchString({\n    board,\n    language,\n    ...rules,\n  })\n\n  const baseUrl = getBaseUrl(platform)\n  const orientation = useOrientation()\n\n  const landscapeSize = useCssExp`min(50vw, 55vh)`\n\n  const portraitSize = useCssExp`min(95vw, 55vh)`\n\n  const size = orientation === ScreenOrientation.Landscape ? landscapeSize : portraitSize\n\n  return <QrCode\n    info={`${baseUrl}/${search}`}\n    colors={{\n      foreground: constants.colorBackgroundDark,\n      background: constants.colorBackgroundLight\n    }}\n    size={size}\n  />\n}\n\nexport default ShareGameQrCode\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/dictionary.worker.3be30f19.worker.js\");\n}\n","import { v4 as uuid } from 'uuid'\n\nexport type ToWorkerPayload = {\n  requestId: string\n}\n\ntype FromWorkerPayload<T> = {\n  requestId: string,\n  error?: any\n  result?: T\n}\n\nexport const promisifyWorker = <T extends ToWorkerPayload, F>(worker: InstanceType<typeof window.Worker>, payload: Omit<T, 'requestId'>): Promise<F> => {\n  return new Promise<F>((respond, reject) => {\n    const requestId = uuid()\n    worker!.postMessage({ ...payload, requestId })\n    worker!.addEventListener('message', (e: MessageEvent<FromWorkerPayload<F>>) => {\n      const { data } = e\n      if (data?.requestId !== requestId) return\n\n      if (data.error) {\n        reject(e)\n        return\n      }\n\n      respond(data.result as F)\n    })\n  })\n}\n\n","import { useContext } from 'react'\nimport * as R from 'ramda'\n\nimport { LetterScores, scoreWord } from '../../game'\nimport { Rules } from '../../game/rules'\nimport { makeClasses } from '../../util/classes'\n\nimport './MostRecentGuess.css'\nimport { Guess } from '../../game/guess'\nimport { Dictionary } from '../../game/dictionary'\n\nconst MostRecentGuess: React.FC = () => {\n\n  const rules = useContext(Rules)\n  const letterScores = useContext(LetterScores)\n\n  const { guesses, currentGuess: currentLetterChain, isGuessing } = useContext(Guess)\n  const dictionary = useContext(Dictionary)\n  const showLetterChain = isGuessing\n  const guessesReversed = R.reverse(guesses)\n  const mostRecentGuess = R.head(guessesReversed) || ''\n\n  const isCorrectGuess = dictionary.boardDictionary.includes(mostRecentGuess)\n  const isFirstTimeGuessing = guesses.filter(guess => guess === mostRecentGuess).length === 1\n\n  const shouldScoreWord = !showLetterChain && isCorrectGuess\n  const repeatScore = !isFirstTimeGuessing\n\n  const score = shouldScoreWord ? ` +${scoreWord(mostRecentGuess, rules.score, letterScores)}` : ''\n\n  const classes = makeClasses('most-recent-guess', { condition: repeatScore, name: 'repeat-guess' })\n\n  const word = showLetterChain ? currentLetterChain : mostRecentGuess\n\n  return <div className={classes}>{`${word.toUpperCase()}${score}`}</div>\n}\n\nexport default MostRecentGuess\n","import GameModeDetails from '../GameModeDetails'\nimport './layout.css'\n\ntype VerticalContainerProps = {\n  Board: JSX.Element,\n  MostRecentGuess: JSX.Element,\n  Guesses: JSX.Element,\n  Score: JSX.Element\n}\n\ntype HorizontalContainerProps = VerticalContainerProps & {\n  FoundWords: JSX.Element\n}\n\nexport const HorizontalContainer: React.FC<HorizontalContainerProps> = ({\n  Board,\n  MostRecentGuess,\n  Guesses,\n  Score,\n  FoundWords\n}) => {\n  return <div className=\"game-horizontal-container\">\n    <div className=\"left-pane\">\n      <div className=\"board-holder\">{Board}</div>\n      <div className=\"most-recent-guess-holder\">{MostRecentGuess}</div>\n      <div className=\"game-layout-game-mode-details-holder\"><GameModeDetails /></div>\n    </div>\n    <div className=\"right-pane\">\n      <div className=\"score-holder\">{Score}</div>\n      <div className=\"list-titles-holder\">\n        <div>Guesses</div>\n        <div>Found Words</div>\n      </div>\n      <div className=\"lists-holder\">\n        <div className=\"guesses-holder\">{Guesses}</div>\n        <div className=\"found-words-holder\">{FoundWords}</div>\n      </div>\n    </div>\n  </div>\n}\n\nexport const VerticalContainer: React.FC<VerticalContainerProps> = ({\n  Board,\n  MostRecentGuess,\n  Guesses,\n  Score\n}) => {\n  return <div className=\"game-vertical-container\">\n    <div className=\"score-holder\">{Score}</div>\n    <div className=\"most-recent-guess-holder\">{MostRecentGuess}</div>\n    <div className=\"board-holder\">{Board}</div>\n    <div className=\"guesses-holder\">{Guesses}</div>\n    <div className=\"game-layout-game-mode-details-holder\"><GameModeDetails /></div>\n  </div>\n}\n","import { useContext } from 'react' \n\nimport { ScreenOrientation, useOrientation } from '../util/hooks'\n\nimport { Score as ScoreContext } from '../game/score'\n\nimport Board from './game/Board'\nimport Score from './game/Score'\nimport Guesses, { GuessOrientation } from './game/Guesses'\nimport MostRecentGuess from './game/MostRecentGuess'\nimport ScoredWordList from './game/ScoredWordList'\nimport { HorizontalContainer, VerticalContainer } from './game/layouts'\nimport { useUpdateHighScore } from '../game/high-scores'\n\nconst Game: React.FC = () => {\n\n  const { foundWords } = useContext(ScoreContext)\n\n  const orientation = useOrientation()\n\n  const useVerticalLayout = orientation === ScreenOrientation.Portrait\n\n  useUpdateHighScore()\n\n  const guessOrientation = useVerticalLayout ? GuessOrientation.Horizontal : GuessOrientation.Vertical\n\n  const board = <Board/>\n  const mostRecentGuesses = <MostRecentGuess />\n  const guesses = <Guesses orientation={guessOrientation} />\n  const score = <Score />\n  const foundWordsComponent = <ScoredWordList {...{ scoredWords: foundWords }} />\n\n\n  const verticalLayout = <VerticalContainer\n    Board={board}\n    MostRecentGuess={mostRecentGuesses}\n    Guesses={guesses}\n    Score={score}\n  />\n\n  const horizontalLayout = <HorizontalContainer\n    Board={board}\n    MostRecentGuess={mostRecentGuesses}\n    Guesses={guesses}\n    Score={score}\n    FoundWords={foundWordsComponent}\n  />\n\n  const layout = useVerticalLayout ? verticalLayout : horizontalLayout;\n  return <div className=\"game-container\" style={{ height: '100%' }}>{layout}</div>\n}\n\nexport default Game\n","import Qr from 'qrcode-generator'\n\nimport './QrCode.css'\n\ntype Colors = {\n  background: string,\n  foreground: string\n}\n\nexport type QrCodeProps = {\n  info: string,\n  size?: number,\n  colors?: Colors\n}\n\nconst applySize = (size: number, svg: string) => {\n  const regex = /(width|height)=\"[\\d]+px\"/g\n\n  return svg.replace(regex, `$1=\"${size}px\"`)\n}\n\nconst applyColor = ({ foreground, background }: Colors, svg: string) => {\n  const foregroundRx = /fill=\"black\"/\n  const backgroundRx = /fill=\"white\"/\n\n  return svg.replace(foregroundRx, `fill=\"${foreground}\"`).replace(backgroundRx, `fill=\"${background}\"`)\n}\n\nconst applyProps = ({ size, colors }: { size?: number, colors?: Colors}, svg: string) => {\n  if (!size && !colors) return svg\n\n  if(!size) return applyColor(colors!, svg)\n\n  if(!colors) return applySize(size!, svg)\n\n  return applyColor(colors, applySize(size, svg))\n}\n\nconst QrCode = (props: QrCodeProps): JSX.Element => {\n  const { info } = props\n  const qr = Qr(0, 'M')\n  qr.addData(info)\n  qr.make()\n  const svg = applyProps(props, qr.createSvgTag())\n\n  return <div className=\"qr-code\" dangerouslySetInnerHTML={{ __html: svg }}/>\n}\n\nexport default QrCode\n","import { useContext } from 'react'\nimport { ReactComponent as PlayCircle } from '@material-design-icons/svg/round/play_circle.svg'\n\nimport GameModeDetails from './GameModeDetails'\n\nimport constants, { useConstants } from '../style/constants'\nimport { Dictionary } from '../game/dictionary'\nimport { Translations } from '../translations'\nimport { Translation } from '../translations/implemented-languages'\nimport { Language } from '../game/language'\n\nimport './StartScreen.css'\nimport ShareGameQrCode, { Platform } from './game/ShareGameQrCode'\nimport { Rules } from '../game/rules'\nimport { Board } from '../game/board/hooks'\n\nexport type StartScreenProps = {\n  handleStart: () => any\n  loading: boolean,\n  error: boolean,\n  showQrCode?: boolean,\n  handleBoardRefresh?: () => void,\n  pageTitle: string\n}\n\nconst StartScreen: React.FC<StartScreenProps> = ({\n  handleStart,\n  loading,\n  error,\n  showQrCode,\n  pageTitle,\n  handleBoardRefresh\n}) => {\n  const languageContext = useContext(Language)\n\n  const language = languageContext.metadata.name\n\n  const { fontSizeTitle } = useConstants()\n\n  const dictionary = useContext(Dictionary)\n\n  const translations = useContext(Translations)\n\n  const rules = useContext(Rules)\n\n  const board = useContext(Board)\n\n  const showRefreshButton = loading === false && error === false && typeof handleBoardRefresh === 'function'\n\n  const startButtonClass = loading || error\n    ? 'start-screen-start-button-disabled'\n    : 'start-screen-start-button'\n  const disabled = loading || error\n\n  const wordCount = loading\n    ? 'Loading...'\n    : error\n    ? 'Error loading board'\n    : `${dictionary.boardDictionary.length} words`\n\n  const languageTitle = translations.languageTitles[\n    language as any as keyof Translation['languageTitles']\n  ]\n\n  const qrCode = showQrCode === true && <ShareGameQrCode {...{ rules, language, board, platform: Platform.Android,  }}/>\n\n  return <div className=\"start-screen\">\n    <div className=\"start-screen-title\">{pageTitle}</div>\n    <div className=\"start-screen-language\">{languageTitle}</div>\n    <GameModeDetails/>\n    <div className=\"start-screen-action-bar\">\n      <div className=\"start-screen-word-count\">{wordCount}</div>\n      {showRefreshButton && <div\n        className=\"start-screen-refresh-board-button\"\n        onClick={() => (handleBoardRefresh!)()}\n      >\n        Refresh Board\n      </div>}\n    </div>\n    <div className=\"start-screen-share-game-qr-code\">{!loading && qrCode}</div>\n    <div className=\"start-screen-start-prompt\">When all players are ready, you should all start the game at the same time.</div>\n    <div\n      className={`start-screen-start-button-universal ${startButtonClass}`}\n      onClick={disabled ? undefined : handleStart}\n    >\n      <PlayCircle\n        title=\"Start\"\n        fill={disabled ? constants.colorBackgroundDark : constants.colorBackgroundLight}\n        width={fontSizeTitle}\n        height={fontSizeTitle}\n      />\n      <div>Start game</div>\n    </div>\n  </div>\n}\n\nexport default StartScreen\n","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router'\nimport ResultsScreen from '../components/ResultsScreen'\nimport InGameScreen from '../components/InGameScreen'\nimport { Board, BoardRefresh, useBoardFromUrl } from '../game/board/hooks'\nimport { Language, useLanguage } from '../game/language'\nimport { Rules, useRulesFromQueryString } from '../game/rules'\nimport { getSearchString, useGameUrlParameters } from '../game/url'\nimport { Dictionary, useBoardDictionary } from '../game/dictionary'\nimport { logger } from '../util/logger'\nimport { toSeconds } from 'duration-fns'\nimport { Timer, useTimer } from '../game/timer'\nimport StartScreen from '../components/StartScreen'\nimport GameModeDetails from '../components/GameModeDetails'\nimport { Guess, GuessDispatch, useGuesses } from '../game/guess'\nimport { Score, useScore } from '../game/score'\nimport { LetterScores } from '../game'\nimport { useTimeAttack } from '../game/time-attack'\n\nexport type GameScreenProps = {\n  isMultiplayer?: boolean,\n  isNewGame?: boolean\n}\n\nconst LoadingScreen = (): JSX.Element => {\n  return <>\n    <div className=\"single-player-loading-screen\">\n      <GameModeDetails />\n      Loading board...\n    </div>\n  </>\n}\n\ntype GetNextScreenParameters = {\n  startScreenProps: {\n    loading: boolean,\n    error: boolean,\n    showQrCode: boolean\n    handleStart: () => void,\n    handleBoardRefresh?: () => void,\n    pageTitle: string\n  }\n  autoStart: boolean,\n  started: boolean,\n  finished: boolean\n}\n\nconst getNextScreenLogic = ({\n  startScreenProps, autoStart, started, finished\n}: GetNextScreenParameters) => {\n\n  if (finished) return <ResultsScreen />\n\n  if (started) return <InGameScreen />\n\n  if (autoStart) return <LoadingScreen />\n\n  return <StartScreen {...startScreenProps}/>\n}\n\ntype GameProps = {\n  autoStart?: boolean,\n  showQrCode: boolean,\n  handleBoardRefresh?: () => void,\n  isMultiplayer: boolean,\n}\n\nconst useAutoStart = (shouldAutoStart: boolean, condition: boolean, handleStart: () => void) =>  {\n  const [triggered, setTriggered] = useState(false)\n  useEffect(() => {\n    if (!shouldAutoStart || triggered) return\n\n    if (condition) {\n      handleStart()\n      setTriggered(true)\n    }\n  }, [shouldAutoStart, condition, handleStart, triggered, setTriggered])\n}\n\nconst Game = ({\n  autoStart: shouldAutoStart,\n  handleBoardRefresh,\n  showQrCode,\n  isMultiplayer\n}: GameProps): JSX.Element => {\n  const autoStart = shouldAutoStart === true\n  const [finished, updateFinished] = useState(false)\n  const [started, updateStarted] = useState(false)\n\n  const board = useContext(Board)\n  const language = useContext(Language)\n  const rules= useContext(Rules)\n  const dictionary = useBoardDictionary(language, board, rules.minimumWordLength)\n  const [guess, dispatchGuess] = useGuesses(board)\n\n  const loading = language.loading || dictionary.loading\n  const { error } = language\n\n  const handleFinish = useCallback(() => {\n    logger.debug('handling finish...')\n    updateFinished(true)\n  }, [updateFinished])\n\n  const timer = useTimer(toSeconds(rules.time), handleFinish)\n\n  const { startTime } = timer\n\n  const score = useScore(guess, dictionary)\n\n  const handleStart = useCallback(() => { updateStarted(true); startTime() }, [updateStarted, startTime])\n\n  useAutoStart(autoStart, loading && !error, handleStart)\n\n  useTimeAttack(rules, timer, score)\n\n  const pageTitle = `Web Lexica ${showQrCode ? 'New ' : ''}${isMultiplayer ? 'Multiplayer Game' : ''}`\n\n  const toRender = getNextScreenLogic({\n    startScreenProps: {\n      loading,\n      error,\n      handleStart,\n      handleBoardRefresh,\n      showQrCode,\n      pageTitle\n    },\n    autoStart,\n    started,\n    finished\n  })\n\n  return <Guess.Provider value={guess}>\n    <GuessDispatch.Provider value={dispatchGuess}>\n      <Dictionary.Provider value={dictionary}>\n        <Score.Provider value={score}>\n          <Timer.Provider value={timer}>\n            {toRender}\n          </Timer.Provider>\n        </Score.Provider>\n      </Dictionary.Provider>\n    </GuessDispatch.Provider>\n  </Guess.Provider>\n}\n\nconst useUpdatingSearchString = (shouldUpdateSearch: boolean) => {\n  const { pathname } = useLocation()\n  const board = useContext(Board)\n  const language = useContext(Language)\n  const rules = useContext(Rules)\n  const history = useHistory()\n  useEffect(() => {\n    if (shouldUpdateSearch === true) {\n      const searchString = getSearchString({ board, language: language.metadata.name, ...rules })\n\n      const url = `${pathname}${searchString}`\n      history.replace(url)\n    }\n  }, [board, language, shouldUpdateSearch, rules, pathname, history])\n}\n\nconst NewGame = ({ isMultiplayer }: { isMultiplayer: boolean }): JSX.Element => {\n\n  const handleBoardRefresh = useContext(BoardRefresh)\n\n  useUpdatingSearchString(isMultiplayer)\n\n  return <Game\n    handleBoardRefresh={handleBoardRefresh}\n    showQrCode={isMultiplayer}\n    isMultiplayer={isMultiplayer}\n    autoStart={!isMultiplayer}\n  />\n}\n\nconst Multiplayer = (): JSX.Element => {\n  const board = useBoardFromUrl()\n  const rules = useRulesFromQueryString(board)\n  const params = useGameUrlParameters()\n  const language = useLanguage(params.language)\n\n  return <Board.Provider value={board}>\n    <Rules.Provider value={rules}>\n      <Language.Provider value={language}>\n        <LetterScores.Provider value={language?.metadata?.letterScores}>\n          <Game showQrCode={false} isMultiplayer />\n        </LetterScores.Provider>\n      </Language.Provider>\n    </Rules.Provider>\n  </Board.Provider>\n}\n\nconst GameScreen = ({ isMultiplayer: m, isNewGame: n }: GameScreenProps): JSX.Element => {\n  const [isMultiplayer, isNewGame] = [m === true, n === true]\n\n\n  const refreshBoard = useContext(BoardRefresh)\n  useEffect(() => {\n    logger.debug('running GameScreen useEffect...')\n    return refreshBoard\n  }, [refreshBoard])\n\n\n  if (isNewGame) return <NewGame isMultiplayer={isMultiplayer} />\n  return <Multiplayer/>\n}\n\nexport default GameScreen\n","import { useEffect, useRef } from 'react'\nimport { normalize } from 'duration-fns'\n\nimport { scoreWord } from '.'\nimport { Ruleset } from './rules'\nimport { ScoreContext, ScoreType } from './score'\nimport { TimerContext } from './timer'\nimport { logger } from '../util/logger'\n\nexport const useTimeAttack = (rules: Ruleset, timer: TimerContext, score: ScoreContext) => {\n  // const [foundWordCount, dispatch] = useReducer<Reducer<number, FoundWordCountAction>>(foundWordCountReducer, 0)\n  const foundWordCountRef = useRef(0)\n  useEffect(() => {\n    logger.debug('running useTimeAttack useEffect...', { foundWordLength: score.foundWords.length, count: foundWordCountRef.current })\n    const timeAttackMultiplier = rules?.timeAttack ? rules?.timeAttack : 0\n    if (timeAttackMultiplier <= 0 || score.foundWords.length === 0) return\n\n    const lastWordFound = score.foundWords[score.foundWords.length - 1]\n    if (foundWordCountRef.current === score.foundWords.length) return\n\n\n    logger.debug('adding time...', { foundWordLength: score.foundWords.length, count: foundWordCountRef.current })\n\n\n    foundWordCountRef.current += 1\n    const timeToAdd = normalize({ seconds: scoreWord(lastWordFound, ScoreType.Length, {}) * timeAttackMultiplier })\n\n    timer.addTime(timeToAdd)\n  }, [rules, score, timer, foundWordCountRef])\n}\n","import { useContext } from 'react'\nimport { CurrentGameType, GameType } from '../game'\nimport GameScreen from './GameScreen'\n\nconst Multiplayer = (): JSX.Element => {\n  const gameType = useContext(CurrentGameType)\n\n  return <GameScreen isMultiplayer isNewGame={gameType === GameType.Create} />\n}\n\nexport default Multiplayer\n","\nconst Options: React.FC = () => <div>\n  <div>Options</div>\n\n  <div>This page hasn't been implemented yet!</div>\n</div>\n\nexport default Options\n","import GameScreen from './GameScreen'\n\nconst SinglePlayer = (): JSX.Element => <GameScreen isNewGame />\n\nexport default SinglePlayer\n","import { useCallback } from 'react'\nimport { useHistory } from 'react-router'\n\nimport {\n  MetadataV1,\n  setLanguageInLocalStorage,\n  useLanguageCodeFromLocalStorage,\n  useMultipleLanguageMetadata\n} from '../game/language'\nimport { useTranslations } from '../translations'\nimport { makeClasses } from '../util/classes'\nimport { logger } from '../util/logger'\n\nimport './Lexicons.css'\n\nconst getBetaLabel = (metadata?: MetadataV1) => {\n  const getLabel = (text: string) => <div className=\"lexicons-lexicon-beta-label\">{text}</div>\n  if (metadata?.isBeta === undefined) return getLabel('Loading...')\n  return metadata.isBeta ? getLabel('Beta') : <></>\n}\n\ntype LexiconProps = {\n  languageCode: string,\n  metadata?: MetadataV1\n}\n\nconst Lexicon = ({\n  languageCode,\n  metadata\n}: LexiconProps): JSX.Element => {\n  const { languageTitles } = useTranslations()\n  const languageTitleKey = languageCode as any as keyof typeof languageTitles\n  const title = languageTitles[languageTitleKey] || languageCode\n  const beta = getBetaLabel(metadata)\n  const currentCode = useLanguageCodeFromLocalStorage()\n\n  const history = useHistory()\n\n  const handleOnClick = useCallback(() => {\n    logger.debug('setting language code...', languageCode)\n    setLanguageInLocalStorage(languageCode)\n    history.push('/')\n  }, [languageCode, history])\n\n  const classes = makeClasses('lexicons-lexicon', {\n    condition: currentCode === languageCode,\n    name: 'lexicons-lexicon-selected'\n  })\n\n  return <div\n    className={classes}\n    onClick={handleOnClick}\n  >\n    <div className=\"lexicons-lexicon-title\">{title}</div>\n    {beta}\n  </div>\n}\n\nconst Lexicons = (): JSX.Element => {\n  const { loading, metadata } = useMultipleLanguageMetadata()\n  const languages = Object.keys(metadata)\n\n  const getLexicon = (languageCode: string) => <Lexicon\n      languageCode={languageCode}\n      key={languageCode}\n      metadata={metadata[languageCode]}\n    />\n\n  if (loading) return <div className=\"Page lexicons-loading\">Loading...</div>\n\n  return <div className=\"Page lexicons scrollbar\">\n    {languages.map(l => getLexicon(l))}\n  </div>\n}\n\nexport default Lexicons\n","import { useCallback, useState } from 'react'\nimport { OnChangeEvent } from './types'\n\nconst Name = ({ handleNameUpdate }: { handleNameUpdate: (name: string) => void}) => {\n  const [rawName, setRawName] = useState('')\n  const handleChange = useCallback((e: OnChangeEvent) => {\n    setRawName(e?.target?.value)\n    handleNameUpdate(e?.target?.value)\n  }, [setRawName, handleNameUpdate])\n  const prefix = 'new-game-mode'\n  return <div className={`${prefix}-name-container`}>\n    <input\n      className={`${prefix}-text-input ${prefix}-name`}\n      about=\"For choosing game mode\"\n      type=\"text\"\n      onChange={handleChange}\n      placeholder=\"Name\"\n      value={rawName}\n      required\n      minLength={1}\n    />\n    <div className={`${prefix}-name-explanation`}>For choosing game mode</div>\n  </div>\n}\n\nexport default Name\n","import { ReactNode } from 'react'\nimport Svg, { SvgComponent } from '../Svg'\n\nexport type DescriptionProps = {\n  title: string,\n  svg: SvgComponent,\n  children?: ReactNode\n}\n\nconst getPrefixedClass = (...segments: string[]) => {\n  const prefix = 'new-game-mode'\n  if (!segments.length) return `${prefix}`\n\n  return `${prefix}-${segments.join('-')}`\n}\n\nconst getClasses = (...classes: string[][]) => {\n  return classes.map(c => getPrefixedClass(...c)).join(' ')\n}\n\nexport const Description = ({ title, svg, children }: DescriptionProps): JSX.Element => {\n  const ruleClass = title.toLowerCase().replace(/\\s+/g, '-')\n\n  return <div className={getClasses(['container'], [ruleClass, 'container'])} >\n    <div className=\"new-game-mode-description-container\" >\n      <Svg.Standard svg={svg} title={title}/>\n      <div>{title}</div>\n    </div>\n    {children ? children : ''}\n  </div>\n}\n\nexport default Description\n","import { ChangeEvent, useCallback, useState } from 'react'\nimport { ReactComponent as Schedule } from '@material-design-icons/svg/round/schedule.svg'\n\nimport Description from './Description'\n\nconst TimeLimit = ({ handleTimeUpdate }: { handleTimeUpdate: (time: number) => void }) => {\n  const [rawTimeLimit, setRawTimeLimit] = useState('')\n  const title = 'Time Limit'\n  const handleTimeLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setRawTimeLimit(e?.target?.value)\n    const time = parseInt(e?.target?.value)\n\n    handleTimeUpdate(Number.isNaN(time) ? 0 : time)\n  }, [setRawTimeLimit, handleTimeUpdate])\n\n  return <Description {...{ title, svg: Schedule }} >\n    <div>\n      <input\n          type=\"number\"\n          className=\"new-game-mode-text-input new-game-mode-time-limit-text-input\"\n          about=\"Time limit in minutes\"\n          onChange={handleTimeLimitChange}\n          value={rawTimeLimit}\n          step=\"1\"\n          min=\"1\"\n      />\n      <div className=\"new-game-mode-time-limit-description\">\n        Time limit in minutes\n      </div>\n    </div>\n  </Description>\n}\n\nexport default TimeLimit\n","const optionClass = (type: string) => `new-game-mode-${type}-option`\nconst optionsClass = (type: string) => `new-game-mode-${type}-options`\n\nexport const getClass = {\n  optionClass,\n  optionsClass\n}","import { useCallback, useRef } from 'react'\nimport { ReactComponent as RadioButtonUnchecked } from '@material-design-icons/svg/round/radio_button_unchecked.svg'\nimport { ReactComponent as RadioButtonChecked } from '@material-design-icons/svg/round/radio_button_checked.svg'\n\nimport Svg from './Svg'\n\nexport type RadioProps<T extends string | number | readonly string[]> = {\n  title: string,\n  value: T,\n  group: string,\n  id?: string,\n  checked: boolean,\n  className?: string\n  onChange: (value: T) => void\n}\n\nfunction Radio<T extends string | number | readonly string[]>({\n  title,\n  value,\n  group,\n  id,\n  onChange,\n  checked\n}: RadioProps<T>): JSX.Element {\n  const inputRef = useRef<HTMLInputElement>(undefined as any)\n\n  const handleChange = useCallback(() => {\n    inputRef.current && (inputRef.current.checked = true)\n    onChange(value)\n  }, [onChange, inputRef, value])\n\n  return <>\n    <div\n      onClick={handleChange}\n      style={{ display: 'flex' }}\n    >\n      <Svg.Standard svg={checked ? RadioButtonChecked : RadioButtonUnchecked} title={title} />\n    </div>\n    <input\n      type=\"radio\"\n      id={id}\n      value={value}\n      name={group}\n      ref={inputRef}\n      onChange={() => onChange(value)}\n      checked={checked}\n      style={{display: 'none'}}\n    />\n    <label\n      onClick={handleChange}\n    >{title}</label>\n  </>\n}\n\nexport default Radio\n","import { useCallback, useState } from 'react'\nimport { ReactComponent as EmojiEvents } from '@material-design-icons/svg/round/emoji_events.svg'\n\nimport { getClass } from './util'\nimport { ScoreType } from '../../game/score'\n\nimport Description from './Description'\nimport Radio from '../Radio'\n\nconst {\n  optionClass\n} = getClass\n\nconst isScoreType = (type: any): type is ScoreType => [ScoreType.Letters, ScoreType.Length].includes(type)\n\nconst ScoringType = ({ handleScoreUpdate, scoreTypes }: { handleScoreUpdate: (type: ScoreType) => void, scoreTypes: ScoreType[] }): JSX.Element => {\n  const [scoreType, setScoreType] = useState<ScoreType>('' as any)\n  const title = 'Score Type'\n\n  const handleChange = useCallback((value: string) => {\n    if (!isScoreType(value)) return\n    setScoreType(value)\n    handleScoreUpdate(value)\n  }, [handleScoreUpdate, setScoreType])\n\n  return <Description title={title} svg={EmojiEvents}>\n    <div>\n      {scoreTypes.map(type => {\n        const title = {\n          [ScoreType.Letters]: 'Letter Points',\n          [ScoreType.Length]: 'Word Length'\n        }[type]\n\n        return <div className={optionClass('score-type')}>\n          <Radio\n            group=\"score-type\"\n            value={type}\n            id={type}\n            title={title}\n            onChange={handleChange}\n            checked={scoreType===type}\n          />\n        </div>\n      }) }\n    </div>\n  </Description>\n}\n\nexport default ScoringType\n","import { ReactComponent as GridView } from '@material-design-icons/svg/round/grid_view.svg'\n\nimport { getClass } from './util'\n\nimport Description from './Description'\nimport Radio from '../Radio'\nimport { useCallback, useState } from 'react'\n\nconst {\n  optionClass\n} = getClass\n\nexport type BoardSizeProps = {\n  handleBoardSizeChange: (size: number) => void,\n  sizes: number[] \n}\n\nconst BoardSize = ({\n  handleBoardSizeChange,\n  sizes\n}: BoardSizeProps) => {\n  const [boardSize, setBoardSize] = useState(0)\n  const title = 'Board Size'\n\n  const handleChange = useCallback((size: number) => {\n    if (!sizes.includes(size)) return\n    setBoardSize(size)\n    handleBoardSizeChange(size)\n  }, [handleBoardSizeChange, setBoardSize, sizes])\n\n  return <Description title={title} svg={GridView}>\n    <div>\n      {sizes.map(size => {\n        const id = `${size}x${size}`\n        return <div className={optionClass('board-size')}>\n          <Radio\n            group=\"board-size\"\n            value={size}\n            id={id}\n            title={id}\n            onChange={handleChange}\n            checked={boardSize===size}\n          />\n        </div>\n      })}\n    </div>\n  </Description>\n}\n\nexport default BoardSize\n","import { useState, useCallback  } from 'react'\nimport { ReactComponent as Sort } from '@material-design-icons/svg/round/sort.svg'\n\nimport Description from './Description'\nimport Radio from '../Radio'\n\nimport { getClass } from './util'\n\nconst {\n  optionClass,\n  optionsClass\n} = getClass\n\nexport type MinimumWordLengthProps = {\n  handleLengthUpdate: (length: number) => void,\n  wordLengths: number[]\n}\n\nconst MinimumWordLength = ({\n  handleLengthUpdate,\n  wordLengths\n}: MinimumWordLengthProps): JSX.Element => {\n  const [minimumWordLength, setMinimumWordLength] = useState(0)\n  const title = 'Minimum Word Length'\n\n  const handleChange = useCallback((length: number) => {\n    if (!wordLengths.includes(length)) return\n\n    handleLengthUpdate(length)\n    setMinimumWordLength(length)\n  }, [wordLengths, handleLengthUpdate])\n\n  return <Description title={title} svg={Sort}>\n    <div className={optionsClass('minimum-word-length')}>\n      {wordLengths.map(l => <div\n        className={optionClass('minimum-word-length')}\n      >\n        <Radio\n          group=\"minimum-word-length\"\n          value={l}\n          id={l.toString()}\n          title={l.toString()}\n          onChange={handleChange}\n          checked={minimumWordLength===l}\n        />\n      </div>)}\n    </div>\n  </Description>\n}\n\nexport default MinimumWordLength\n","import { useCallback, useState } from 'react'\nimport { ReactComponent as DirectionsRun } from '@material-design-icons/svg/round/directions_run.svg'\n\nimport Description from './Description'\nimport Radio from '../Radio'\n\nexport type TimeAttackProps = {\n  handleTimeAttackUpdate: (multiplier: number) => void\n  timeAttackMultipliers: number[],\n  selectedMultiplier: number\n}\n\nconst getMultiplierName = (multiplier: number) => {\n  if (multiplier === 0) return 'Off'\n\n  return `x${multiplier}`\n}\n\nconst TimeAttack = ({\n  handleTimeAttackUpdate,\n  timeAttackMultipliers,\n  selectedMultiplier\n}: TimeAttackProps): JSX.Element => {\n  const [multiplier, setMultiplier] = useState(0)\n\n  const handleMultiplierUpdate = useCallback((multiplier: number) => {\n    setMultiplier(multiplier)\n    handleTimeAttackUpdate(multiplier)\n  }, [setMultiplier, handleTimeAttackUpdate])\n\n  return <Description\n    svg={DirectionsRun}\n    title=\"Time Attack\"\n  >\n    <div className=\"new-game-mode-time-attack-input-holder\">\n      <div className=\"new-game-mode-time-attack-options\">\n        Multipliers: \n        {timeAttackMultipliers.map(m => <Radio\n          checked={m===multiplier}\n          group=\"time-attack-multipliers\"\n          onChange={() => handleMultiplierUpdate(m)}\n          title={getMultiplierName(m)}\n          value={m}\n          key={m}\n        />)}\n      </div>\n      <div className=\"new-game-mode-time-attack-example\">\n        Adds (Word Length score x {multiplier}) second(s) per word found\n      </div>\n    </div>\n    {/* <input type=\"checkbox\" name=\"time-attack\" checked={timeAttack} onChange={handleOnClick}/> */}\n  </Description>\n}\n\nexport default TimeAttack\n","import { useCallback, useState, useMemo } from 'react'\nimport { ReactComponent as Save } from '@material-design-icons/svg/round/save.svg'\n\nimport Svg from '../components/Svg'\nimport Name from '../components/new-game-mode/Name'\nimport TimeLimit from '../components/new-game-mode/TimeLimit'\nimport ScoringType from '../components/new-game-mode/ScoringType'\n\nimport { makeClasses } from '../util/classes'\nimport { ScoreType } from '../game/score'\nimport { logger } from '../util/logger'\nimport { Renderable, useRenderInBanner } from '../components/Banner'\nimport constants from '../style/constants'\nimport { addRuleset, setCurrentRuleset } from '../game/rules'\nimport { Duration } from 'duration-fns'\nimport { useHistory } from 'react-router'\nimport BoardSize from '../components/new-game-mode/BoardSize'\nimport MinimumWordLength from '../components/new-game-mode/MinimumWordLength'\n\nimport './NewGameMode.css'\nimport TimeAttack from '../components/new-game-mode/TimeAttack'\n\nconst validTimeLimit = (time: number) => time > 0\nconst validName = (name: string) => /([\\w\\s\\d_-]+)/.test(name)\nconst boardSizes = [4, 5, 6]\nconst scoreTypes = [ScoreType.Length, ScoreType.Letters]\nconst wordLengths = [3, 4, 5, 6]\nconst timeAttackMultipliers = [0, 1, 2, 3, 4, 5]\n\nconst isValidTimeAttackMultiplier = (multiplier: number) => multiplier >= 0\n\ntype SaveGameModeProps = { isValid: boolean, handleSave: () => void }\n\nconst SaveGameMode = ({ isValid, handleSave }: SaveGameModeProps): Renderable => ({\n  maxWidth,\n  maxHeight\n}) => {\n  const showName = maxWidth / maxHeight > 7.5\n\n  const classes = makeClasses(\n    'new-game-mode-submit-button',\n    'banner-rendered-prop-container',\n    { condition: !isValid, name: 'new-game-mode-submit-button-disabled' }\n  )\n\n  return <div className={classes} onClick={handleSave} >\n    <Svg.Customizable\n      svg={Save}\n      props={{\n        title: 'Save Game Mode',\n        fill: isValid ? constants.colorContentDark : constants.colorContentLowContrastDark,\n        width: maxHeight * .8,\n        height: maxHeight * .8\n      }}\n    />\n    {showName ? <div className={makeClasses(\n      'new-game-mode-submit-label',\n      'banner-rendered-prop-label'\n    )}> Save Game Mode </div> : ''}\n  </div>\n}\n\nconst NewGameMode = (): JSX.Element => {\n  const [timeAttack, setTimeAttack] = useState(0)\n\n  const [name, setName] = useState('')\n  const [timeLimit, setTimeLimit] = useState(0)\n  const [boardSize, setBoardSize] = useState(0)\n  const [scoreType, setScoreType] = useState<ScoreType>('invalid' as any)\n  const [minimumWordLength, setMinimumWordLength] = useState(0)\n\n\n  const history = useHistory()\n\n  const isValid = useMemo(() => {\n    return validTimeLimit(timeLimit) &&\n      boardSizes.includes(boardSize) &&\n      validName(name) &&\n      scoreTypes.includes(scoreType) &&\n      wordLengths.includes(minimumWordLength) &&\n      isValidTimeAttackMultiplier(timeAttack)\n  }, [timeLimit, boardSize, name, scoreType, minimumWordLength, timeAttack])\n\n  const handleSave = useCallback(() => {\n    logger.debug(\n      'handling save...',\n      { isValid, timeLimit, boardSize, name, scoreType, minimumWordLength, }\n    )\n    if (!isValid) return\n    const id = addRuleset({\n      boardWidth: boardSize,\n      minimumWordLength,\n      score: scoreType,\n      name,\n      time: { minutes: timeLimit } as Duration,\n      timeAttack\n    })\n\n    setCurrentRuleset(id)\n\n    history.push('/')\n  }, [isValid, timeLimit, boardSize, name, scoreType, minimumWordLength, history, timeAttack])\n\n  const BannerElement = useMemo(() => SaveGameMode({ isValid, handleSave }), [isValid, handleSave])\n\n  useRenderInBanner(BannerElement)\n\n  return <div className=\"Page new-game-mode\">\n    <Name handleNameUpdate={setName} />\n    <TimeLimit handleTimeUpdate={setTimeLimit} />\n    <BoardSize handleBoardSizeChange={setBoardSize} sizes={boardSizes} />\n    <ScoringType handleScoreUpdate={setScoreType} scoreTypes={scoreTypes} />\n    <MinimumWordLength handleLengthUpdate={setMinimumWordLength} wordLengths={wordLengths} />\n    <TimeAttack handleTimeAttackUpdate={setTimeAttack} timeAttackMultipliers={timeAttackMultipliers} selectedMultiplier={timeAttack} />\n  </div>\n}\n\nexport default NewGameMode\n","\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { CurrentGameType, LetterScores, useGameType } from './game'\nimport { Board, BoardRefresh, useGeneratedBoard } from './game/board/hooks'\nimport { Language, useLanguageFromLocalStorage } from './game/language'\nimport { Rules, useRulesFromStorage } from './game/rules'\nimport { Translations, useTranslations } from './translations'\nimport { logger } from './util/logger'\n\nimport GameModes from './pages/GameModes'\nimport Home from './pages/Home'\nimport Multiplayer from './pages/Multiplayer'\nimport Options from './pages/Options'\nimport SinglePlayer from './pages/SinglePlayer'\n\nimport './App.css'\nimport './style/scrollbar.css'\nimport Banner, {\n  RenderInBanner,\n  useBannerContext\n} from './components/Banner'\nimport Lexicons from './pages/Lexicons'\nimport NewGameMode from './pages/NewGameMode'\n\nfunction App() {\n  logger.debug('loading app...')\n\n  const translations = useTranslations()\n  const language = useLanguageFromLocalStorage()\n  const [ruleset] = useRulesFromStorage()\n  const { board, refreshBoard } = useGeneratedBoard(ruleset.boardWidth, language.metadata)\n  const { gameType, setGameType } = useGameType()\n  const { renderState, context } = useBannerContext()\n\n  return (\n      <div className=\"App\">\n        <Translations.Provider\n          value={translations}\n        ><Rules.Provider\n          value={ruleset}\n        ><Language.Provider\n          value={language}\n        ><LetterScores.Provider\n          value={language?.metadata?.letterScores}\n        ><Board.Provider\n          value={board}\n        ><BoardRefresh.Provider\n          value={refreshBoard}\n        ><CurrentGameType.Provider\n          value={gameType}\n        ><RenderInBanner.Provider\n          value={context}\n        >\n          <BrowserRouter basename=\"/web-lexica\">\n            <Route exact path=\"/\">\n              <Home setGameType={setGameType}/>\n            </Route>\n            <Route path=\"/(.+)\">\n              <Banner { ...renderState}/>\n            </Route>\n            <Route path=\"/game-modes\">\n              <GameModes />\n            </Route>\n            <Route path=\"/new-game-mode\">\n              <NewGameMode />\n            </Route>\n            <Route path=\"/lexicons\">\n              <Lexicons />\n            </Route>\n            <Route path=\"/multiplayer\">\n              <Multiplayer />\n            </Route>\n            <Route path=\"/options\">\n              <Options />\n            </Route>\n            <Route path=\"/singleplayer\">\n              <SinglePlayer />\n            </Route>\n          </BrowserRouter>\n        </RenderInBanner.Provider>\n        </CurrentGameType.Provider>\n        </BoardRefresh.Provider>\n        </Board.Provider>\n        </LetterScores.Provider>\n        </Language.Provider>\n        </Rules.Provider>\n        </Translations.Provider>\n      </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}